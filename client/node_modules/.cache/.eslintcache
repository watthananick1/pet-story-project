[{"/Users/watthananick/pet-story-project/client/src/index.js":"1","/Users/watthananick/pet-story-project/client/src/App.js":"2","/Users/watthananick/pet-story-project/client/src/context/AuthContext.js":"3","/Users/watthananick/pet-story-project/client/src/context/AuthReducer.js":"4","/Users/watthananick/pet-story-project/client/src/pages/login/Login.jsx":"5","/Users/watthananick/pet-story-project/client/src/pages/profile/Profile.jsx":"6","/Users/watthananick/pet-story-project/client/src/pages/typepet/TypePet.jsx":"7","/Users/watthananick/pet-story-project/client/src/pages/home/Home.jsx":"8","/Users/watthananick/pet-story-project/client/src/pages/register/Register.jsx":"9","/Users/watthananick/pet-story-project/client/src/apiCalls.js":"10","/Users/watthananick/pet-story-project/client/src/components/sidebar/Sidebar.jsx":"11","/Users/watthananick/pet-story-project/client/src/components/feed/Feed.jsx":"12","/Users/watthananick/pet-story-project/client/src/components/topbar/Topbar.jsx":"13","/Users/watthananick/pet-story-project/client/src/components/rightbar/Rightbar.jsx":"14","/Users/watthananick/pet-story-project/client/src/dummyData.js":"15","/Users/watthananick/pet-story-project/client/src/components/post/Post.jsx":"16","/Users/watthananick/pet-story-project/client/src/components/online/Online.jsx":"17","/Users/watthananick/pet-story-project/client/src/components/closeFriend/CloseFriend.jsx":"18","/Users/watthananick/pet-story-project/client/src/components/share/Share.jsx":"19","/Users/watthananick/pet-story-project/client/src/components/modelEdit/ModalEdit.jsx":"20","/Users/watthananick/pet-story-project/client/src/components/search/Search.jsx":"21"},{"size":313,"mtime":1617783295000,"results":"22","hashOfConfig":"23"},{"size":1097,"mtime":1686005774419,"results":"24","hashOfConfig":"23"},{"size":1080,"mtime":1684936330557,"results":"25","hashOfConfig":"23"},{"size":913,"mtime":1617783295000,"results":"26","hashOfConfig":"23"},{"size":6789,"mtime":1685915450560,"results":"27","hashOfConfig":"23"},{"size":2341,"mtime":1686264614366,"results":"28","hashOfConfig":"23"},{"size":3411,"mtime":1686008859944,"results":"29","hashOfConfig":"23"},{"size":426,"mtime":1617783295000,"results":"30","hashOfConfig":"23"},{"size":9976,"mtime":1685919688768,"results":"31","hashOfConfig":"23"},{"size":947,"mtime":1685919861477,"results":"32","hashOfConfig":"23"},{"size":2293,"mtime":1684974801754,"results":"33","hashOfConfig":"23"},{"size":2551,"mtime":1686271340682,"results":"34","hashOfConfig":"23"},{"size":7987,"mtime":1685492261271,"results":"35","hashOfConfig":"23"},{"size":4422,"mtime":1686189327818,"results":"36","hashOfConfig":"23"},{"size":2525,"mtime":1684483667982,"results":"37","hashOfConfig":"23"},{"size":17473,"mtime":1686191214238,"results":"38","hashOfConfig":"23"},{"size":669,"mtime":1684747399781,"results":"39","hashOfConfig":"23"},{"size":468,"mtime":1684767554320,"results":"40","hashOfConfig":"23"},{"size":10365,"mtime":1686009475897,"results":"41","hashOfConfig":"23"},{"size":6191,"mtime":1686185299838,"results":"42","hashOfConfig":"23"},{"size":1452,"mtime":1685388141803,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"ldi8gy",{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"47"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"47"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"47"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"47"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"47"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"/Users/watthananick/pet-story-project/client/src/index.js",[],[],[],"/Users/watthananick/pet-story-project/client/src/App.js",[],[],"/Users/watthananick/pet-story-project/client/src/context/AuthContext.js",[],[],"/Users/watthananick/pet-story-project/client/src/context/AuthReducer.js",[],[],"/Users/watthananick/pet-story-project/client/src/pages/login/Login.jsx",["113","114","115"],[],"import { useState, useContext } from \"react\";\nimport \"./login.css\";\nimport { loginCall } from \"../../apiCalls\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport Avatar from \"@mui/material/Avatar\";\nimport Button from \"@mui/material/Button\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport TextField from \"@mui/material/TextField\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport Link from \"@mui/material/Link\";\nimport Paper from \"@mui/material/Paper\";\nimport Box from \"@mui/material/Box\";\nimport Grid from \"@mui/material/Grid\";\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\nimport Typography from \"@mui/material/Typography\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport { useHistory } from \"react-router\";\nimport Visibility from \"@mui/icons-material/Visibility\";\nimport VisibilityOff from \"@mui/icons-material/VisibilityOff\";\nimport IconButton from \"@mui/material/IconButton\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\n\nfunction Copyright(props) {\n  return (\n    <Typography\n      variant=\"body2\"\n      color=\"text.secondary\"\n      align=\"center\"\n      {...props}\n    >\n      {\"Copyright Â© \"}\n      <Link color=\"inherit\" href=\"\">\n        Pet story\n      </Link>{\" \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\n\nconst theme = createTheme();\n\nexport default function SignInSide() {\n  const { isFetching, dispatch } = useContext(AuthContext);\n  const [passwordVisible, setPasswordVisible] = useState(false);\n  const history = useHistory();\n  const [showPassword, setShowPassword] = useState(false);\n  const [rememberMe, setRememberMe] = useState(false);\n\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    const data = new FormData(event.currentTarget);\n    console.log({\n      email: data.get(\"email\"),\n      password: data.get(\"password\"),\n    });\n\n    try {\n      await loginCall(\n        { email: data.get(\"email\"), password: data.get(\"password\") },\n        dispatch\n      );\n      history.push(\"/\"); // Redirect to home page after successful login\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n      // Handle login failure, show error message, etc.\n    }\n  };\n\n  const handleChangeRememberMe = () => {\n    setRememberMe(!rememberMe);\n  };\n\n  return (\n    <div className=\"login\">\n      <div className=\"loginWrapper\">\n        <ThemeProvider theme={theme}>\n          <Grid container component=\"main\">\n            <CssBaseline />\n            <Grid\n              item\n              xs={false}\n              sm={4}\n              md={7}\n              sx={{\n                backgroundImage:\n                  \"url(https://firebasestorage.googleapis.com/v0/b/pet-story-f51e3.appspot.com/o/mainData%2FloginImage1.jpg?alt=media&token=4547e22e-e032-4eb9-82fa-84551789d27e)\",\n                backgroundRepeat: \"no-repeat\",\n                backgroundColor: (t) =>\n                  t.palette.mode === \"light\"\n                    ? t.palette.grey[50]\n                    : t.palette.grey[900],\n                backgroundSize: \"cover\",\n                backgroundPosition: \"center\",\n              }}\n            />\n            <Grid\n              item\n              xs={12}\n              sm={8}\n              md={5}\n              component={Paper}\n              elevation={6}\n              square\n            >\n              <Box\n                sx={{\n                  my: 8,\n                  mx: 4,\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  alignItems: \"center\",\n                }}\n              >\n                <Avatar sx={{ m: 1, bgcolor: \"secondary.main\" }}>\n                  <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                  Sign in\n                </Typography>\n                <Box\n                  component=\"form\"\n                  noValidate\n                  onSubmit={handleSubmit}\n                  sx={{ mt: 1 }}\n                >\n                  <TextField\n                    margin=\"normal\"\n                    required\n                    fullWidth\n                    id=\"email\"\n                    label=\"Email Address\"\n                    name=\"email\"\n                    autoComplete=\"email\"\n                    autoFocus\n                  />\n                  <TextField\n                    margin=\"normal\"\n                    required\n                    fullWidth\n                    name=\"password\"\n                    label=\"Password\"\n                    type={passwordVisible ? \"text\" : \"password\"}\n                    id=\"password\"\n                    autoComplete=\"current-password\"\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            aria-label=\"toggle password visibility\"\n                            onClick={() => setPasswordVisible(!passwordVisible)}\n                            edge=\"end\"\n                          >\n                            {passwordVisible ? (\n                              <VisibilityOff />\n                            ) : (\n                              <Visibility />\n                            )}\n                          </IconButton>\n                        </InputAdornment>\n                      ),\n                    }}\n                  />\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        value=\"remember\"\n                        color=\"primary\"\n                        checked={rememberMe}\n                        onChange={handleChangeRememberMe}\n                      />\n                    }\n                    label=\"Remember me\"\n                  />\n                  <Button\n                    type=\"submit\"\n                    fullWidth\n                    variant=\"contained\"\n                    sx={{ mt: 3, mb: 2 }}\n                  >\n                    Sign In\n                  </Button>\n                  <Grid container>\n                    <Grid item xs>\n                      <Link href=\"#\" variant=\"body2\">\n                        Forgot password?\n                      </Link>\n                    </Grid>\n                    <Grid item>\n                      <Link href=\"/register\" variant=\"body2\">\n                        {\"Don't have an account? Sign Up\"}\n                      </Link>\n                    </Grid>\n                  </Grid>\n                  <Copyright sx={{ mt: 5 }} />\n                </Box>\n              </Box>\n            </Grid>\n          </Grid>\n        </ThemeProvider>\n      </div>\n    </div>\n  );\n}\n","/Users/watthananick/pet-story-project/client/src/pages/profile/Profile.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/pages/typepet/TypePet.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/pages/home/Home.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/pages/register/Register.jsx",["116","117","118","119","120","121","122","123"],[],"import { useState, useRef } from \"react\";\nimport \"./register.css\";\nimport Avatar from \"@mui/material/Avatar\";\nimport Button from \"@mui/material/Button\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport TextField from \"@mui/material/TextField\";\nimport Link from \"@mui/material/Link\";\nimport Paper from \"@mui/material/Paper\";\nimport Box from \"@mui/material/Box\";\nimport Grid from \"@mui/material/Grid\";\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\nimport Typography from \"@mui/material/Typography\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport { useHistory } from \"react-router\";\nimport axios from \"axios\";\nimport Visibility from \"@mui/icons-material/Visibility\";\nimport VisibilityOff from \"@mui/icons-material/VisibilityOff\";\nimport IconButton from \"@mui/material/IconButton\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport Card from \"@mui/material/Card\";\n\nfunction Copyright(props) {\n  return (\n    <Typography\n      variant=\"body2\"\n      color=\"text.secondary\"\n      align=\"center\"\n      {...props}\n    >\n      {\"Copyright Â© \"}\n      <Link color=\"inherit\" href=\"\">\n        Pet story\n      </Link>{\" \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\n\nfunction Register() {\n  const history = useHistory();\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(\"\");\n  const [dateOfBirth, setDateOfBirth] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [passwordVisible, setPasswordVisible] = useState(false);\n  const [ConfirmVisible, setConfirmVisible] = useState(false);\n\n  const handleClickShowPassword = () => {\n    setPasswordVisible(!passwordVisible);\n  };\n\n  const handleClickShowConfirm = () => {\n    setConfirmVisible(!ConfirmVisible);\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    if (confirmPassword.current.value !== password) {\n      confirmPassword.current.setCustomValidity(\"Passwords don't match!\");\n    } else {\n      const user = {\n        firstName: firstName,\n        lastName: lastName,\n        email: email,\n        password: password,\n        dateOfBirth: dateOfBirth,\n        status: \"active\",\n        followers: [],\n        followings: [],\n        statusUser: \"USER\",\n        typePets: [],\n        profilePicture: \"\",\n        coverPicture: \"\",\n      };\n      try {\n        const res = await axios.post(\"/api/auth/register\", user);\n        if (res.status === 200) {\n          localStorage.setItem(\"Uid\", res.data.member_id);\n          history.push({\n            pathname: \"/typepet\",\n            state: res.data.member_id, // pass the user object as a prop\n          }); // redirect to the TypePet page\n        } else {\n          console.log(\"Registration failed. Status:\", res.status);\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n\n  const handleFirstNameChange = (event) => {\n    setFirstName(event.target.value);\n  };\n\n  const handleLastNameChange = (event) => {\n    setLastName(event.target.value);\n  };\n\n  const handleEmailChange = (event) => {\n    setEmail(event.target.value);\n  };\n\n  const handlePasswordChange = (event) => {\n    setPassword(event.target.value);\n  };\n\n  const handleDateOfBirthChange = (event) => {\n    setDateOfBirth(event.target.value);\n  };\n\n  const handleConfirmPasswordChange = (event) => {\n    setConfirmPassword(event.target.value);\n  };\n\n  const theme = createTheme();\n\n  return (\n    <div className=\"login\">\n      <div className=\"loginWrapper\">\n        <ThemeProvider theme={theme}>\n          <Grid container component=\"main\">\n            <CssBaseline />\n            <Grid\n              item\n              xs={false}\n              sm={4}\n              md={7}\n              sx={{\n                backgroundImage:\n                  \"url(https://firebasestorage.googleapis.com/v0/b/pet-story-f51e3.appspot.com/o/mainData%2FloginImage1.jpg?alt=media&token=4547e22e-e032-4eb9-82fa-84551789d27e)\",\n                backgroundRepeat: \"no-repeat\",\n                backgroundColor: (t) =>\n                  t.palette.mode === \"light\"\n                    ? t.palette.grey[50]\n                    : t.palette.grey[900],\n                backgroundSize: \"cover\",\n                backgroundPosition: \"center\",\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\",\n              }}\n            />\n            <Grid\n              item\n              xs={12}\n              sm={8}\n              md={5}\n              component={Paper}\n              elevation={6}\n              square\n            >\n              <Box\n                sx={{\n                  my: 8,\n                  mx: 4,\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  alignItems: \"center\",\n                }}\n              >\n                <Avatar sx={{ m: 1, bgcolor: \"secondary.main\" }}>\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                  Register\n                </Typography>\n                <Box\n                  component=\"form\"\n                  noValidate\n                  onSubmit={handleSubmit}\n                  sx={{ mt: 2 }}\n                >\n                  <TextField\n                    sx={{ mb: 2 }}\n                    autoComplete=\"fname\"\n                    name=\"firstName\"\n                    required\n                    fullWidth\n                    id=\"firstName\"\n                    label=\"First Name\"\n                    autoFocus\n                    value={firstName}\n                    onChange={handleFirstNameChange}\n                  />\n                  <TextField\n                    sx={{ mb: 2 }}\n                    required\n                    fullWidth\n                    id=\"lastName\"\n                    label=\"Last Name\"\n                    name=\"lastName\"\n                    autoComplete=\"lname\"\n                    value={lastName}\n                    onChange={handleLastNameChange}\n                  />\n                  <TextField\n                    sx={{ mb: 2 }}\n                    required\n                    fullWidth\n                    id=\"email\"\n                    label=\"Email Address\"\n                    name=\"email\"\n                    autoComplete=\"email\"\n                  />\n                  <TextField\n                    sx={{ mb: 2 }}\n                    required\n                    fullWidth\n                    name=\"password\"\n                    label=\"Password\"\n                    type={passwordVisible ? \"text\" : \"password\"}\n                    id=\"password\"\n                    autoComplete=\"current-password\"\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            aria-label=\"toggle password visibility\"\n                            onClick={() => setPasswordVisible(!passwordVisible)}\n                            edge=\"end\"\n                          >\n                            {passwordVisible ? (\n                              <VisibilityOff />\n                            ) : (\n                              <Visibility />\n                            )}\n                          </IconButton>\n                        </InputAdornment>\n                      ),\n                    }}\n                  />\n                  <TextField\n                    sx={{ mb: 2 }}\n                    required\n                    fullWidth\n                    id=\"confirmPassword\"\n                    label=\"Confirm Password\"\n                    name=\"confirmPassword\"\n                    type={ConfirmVisible ? \"text\" : \"password\"}\n                    autoComplete=\"new-password\"\n                    value={confirmPassword}\n                    onChange={handleConfirmPasswordChange}\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            aria-label=\"toggle password visibility\"\n                            onClick={handleClickShowConfirm}\n                            edge=\"end\"\n                          >\n                            {ConfirmVisible ? (\n                              <VisibilityOff />\n                            ) : (\n                              <Visibility />\n                            )}\n                          </IconButton>\n                        </InputAdornment>\n                      ),\n                    }}\n                  />\n                  <TextField\n                    required\n                    fullWidth\n                    id=\"dateOfBirth\"\n                    label=\"Date of Birth\"\n                    type=\"date\"\n                    name=\"dateOfBirth\"\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    value={dateOfBirth}\n                    onChange={handleDateOfBirthChange}\n                  />\n                  <Button\n                    type=\"submit\"\n                    fullWidth\n                    variant=\"contained\"\n                    sx={{ mt: 3, mb: 2 }}\n                  >\n                    Sign In\n                  </Button>\n                  <Grid container justifyContent=\"flex-end\">\n                    <Grid item>\n                      <Link href=\"/login\" variant=\"body2\">\n                        Already have an account? Sign in\n                      </Link>\n                    </Grid>\n                  </Grid>\n                  <Copyright sx={{ mt: 5 }} />\n                </Box>\n              </Box>\n            </Grid>\n          </Grid>\n        </ThemeProvider>\n      </div>\n    </div>\n  );\n}\n\nexport default Register;\n","/Users/watthananick/pet-story-project/client/src/apiCalls.js",[],[],"/Users/watthananick/pet-story-project/client/src/components/sidebar/Sidebar.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/components/feed/Feed.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/components/topbar/Topbar.jsx",["124","125","126","127","128","129","130","131","132","133"],[],"import \"./topbar.css\";\nimport { Search, Person, Chat, Notifications, Settings, Logout } from \"@mui/icons-material\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { useContext, useState, useEffect, useRef } from \"react\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport axios from 'axios';\nimport ReactLoading from 'react-loading';\n\nimport {\n  Avatar,\n  Menu,\n  MenuItem,\n  ListItemIcon,\n  Divider,\n  TextField,\n  Chip,\n  Stack,\n  CircularProgress,\n  List,\n  ListItem,\n  ListItemText,\n  InputAdornment,\n} from '@mui/material';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport { performSearch } from '../search/Search';\n\nexport default function Topbar() {\n  const { user } = useContext(AuthContext);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [searchValue, setSearchValue] = useState('');\n  const [searchOptions, setSearchOptions] = useState([]);\n  const [searchResponse, setSearchResponse] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const open = Boolean(anchorEl);\n  const history = useHistory();\n  const inputRef = useRef(null);\n\n  const handleClick = () => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n    setAnchorEl(null);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleProfileClick = () => {\n    handleClose();\n    history.push(`/profile/${user?.firstName}`);\n  };\n\n  const handleSearchProfileClick = (firstName) => {\n    handleClose();\n    history.push(`/profile/${firstName}`);\n  };\n\n  const handleLogout = async () => {\n    try {\n      const response = await axios.get('/api/auth/logout');\n      console.log(response.data.message); // \"Logout successful\"\n      localStorage.clear();\n      window.location.href = `/`;\n    } catch (error) {\n      console.error(error.response.data.error); // \"Logout failed\"\n    }\n    handleClose();\n  };\n\n  useEffect(() => {\n    const fetchSearchResults = async () => {\n      setLoading(true);\n      const trimmedSearchValue = searchValue && searchValue.trim();\n      const response = await performSearch(trimmedSearchValue);\n      setLoading(false);\n      setSearchResponse(response);\n\n      if (response) {\n        setSearchOptions(response);\n      } else {\n        setSearchOptions([]);\n      }\n    };\n\n    fetchSearchResults();\n  }, [searchValue]);\n\n  const handleSearchChange = (event) => {\n    const { value } = event.target;\n    setSearchValue(value);\n    console.log('Search= ', value);\n  };\n\n  return (\n    <div className=\"topbarContainer\">\n      <div className=\"topbarLeft\">\n        <Link to=\"/\" style={{ textDecoration: \"none\" }}>\n          <span className=\"logo\">Pet Story</span>\n        </Link>\n      </div>\n      <div className=\"topbarCenter\">\n        <div className=\"searchbar\">\n          <Search className=\"searchIcon\" />\n          <Autocomplete\n            // Styles for Autocomplete component\n            sx={{\n              display: 'inline-block',\n              width: '100%',\n              outline: 'none',\n              '& input': {\n                bgcolor: 'background.paper',\n                color: (theme) =>\n                  theme.palette.getContrastText(theme.palette.background.paper),\n              },\n            }}\n            size=\"small\"\n            onClick={handleClick}\n            id=\"custom-input\"\n            loading={loading}\n            options={searchOptions}\n            getOptionLabel={(option) => `${option.firstName} ${option.lastName}` || option.content || \"\"}\n            renderInput={(params) => (\n              <>\n                <TextField {...params} \n                size=\"small\"\n                variant=\"standard\"\n                sx={{\n                  mt: 2,\n                  mb: 2,\n                  boxShadow: 'none',\n                  width: '97%',\n                  borderRadius: 30,\n                  outline: 'none',\n                  border: 'none'\n                }} \n                onChange={handleSearchChange}\n                placeholder= \"Search\"\n                />\n                \n              </>\n            )}\n            renderOption={(props, option) => {\n              if (option.type === 'User') {\n                return (\n                  <li {...props}>\n                    <Stack direction=\"row\" alignItems=\"center\" onClick={() => handleSearchProfileClick(option?.firstName)}>\n                      <Avatar\n                        src={`${option.profilePicture}`}\n                        sx={{ width: 35, height: 35, mt: 0.5, mb: 0.5, mr: 1 }}\n                      />\n                      <span>{option?.firstName} {option?.lastName}</span>\n                    </Stack>\n                  </li>\n                );\n              }\n              if (option.type === 'Post') {\n                return (\n                  <li {...props}>\n                    <Stack direction=\"row\" alignItems=\"center\">\n                      <span>{`Post ${option.content}`}</span>\n                    </Stack>\n                  </li>\n                );\n              }\n              return null;\n            }\n          }\n          />\n        </div>\n      </div>\n      <div className=\"topbarRight\">\n        <div className=\"topbarLinks\"></div>\n        <div className=\"topbarIcons\">\n          <div className=\"topbarIconItem\">\n            {/* <Person\n              onClick={(event) => setAnchorEl(event.currentTarget)}\n              className=\"topbarIcon\"\n            /> */}\n            <Menu\n              anchorEl={anchorEl}\n              open={open}\n              onClose={handleClose}\n              onClick={handleClose}\n              PaperProps={{\n                elevation: 0,\n                sx: {\n                  overflow: 'visible',\n                  filter: 'drop-shadow(0px 2px 8px rgba(0,0,0,0.32))',\n                  mt: 1.5,\n                  '& .MuiAvatar-root': {\n                    width: 32,\n                    height: 32,\n                    ml: -0.5,\n                    mr: 1,\n                  },\n                  '&:before': {\n                    content: '\"\"',\n                    display: 'block',\n                    position: 'absolute',\n                    top: 0,\n                    right: 14,\n                    width: 10,\n                    height: 10,\n                    bgcolor: 'background.paper',\n                    transform: 'translateY(-50%) rotate(45deg)',\n                    zIndex: 0,\n                  },\n                },\n              }}\n              transformOrigin={{ horizontal: 'right', vertical: 'top' }}\n              anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\n            >\n              <MenuItem onClick={handleProfileClick}>\n                <span>\n                  <Avatar />\n                  <span>Profile</span>\n                </span>\n              </MenuItem>\n              <MenuItem onClick={handleProfileClick}>\n                <ListItemIcon>\n                  <Settings fontSize=\"small\" />\n                </ListItemIcon>\n                Settings\n              </MenuItem>\n              <MenuItem onClick={handleLogout}>\n                <ListItemIcon>\n                  <Logout fontSize=\"small\" />\n                </ListItemIcon>\n                Logout\n              </MenuItem>\n            </Menu>\n          </div>\n        </div>\n          <div className=\"topbarIconItem\">\n            <Link to=\"/messenger\" style={{ color: 'inherit', textDecoration: 'none' }}>\n              <Chat className=\"topbarIcon\" />\n            </Link>\n            <span className=\"topbarIconBadge\">1</span>\n          </div>\n          <div className=\"topbarIconItem\">\n            <Notifications className=\"topbarIcon\" />\n            <span className=\"topbarIconBadge\">1</span>\n          </div>\n        <div>\n          <Avatar\n            aria-label=\"profile\"\n            src={user?.profilePicture}\n            sx={{ width: 35, height: 35, mt: 0.5, mb: 0.5 }}\n            onClick={(event) => setAnchorEl(event.currentTarget)}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/watthananick/pet-story-project/client/src/components/rightbar/Rightbar.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/dummyData.js",[],[],"/Users/watthananick/pet-story-project/client/src/components/post/Post.jsx",["134","135","136","137","138","139","140","141"],[],"import \"./post.css\";\nimport { useState, useEffect, useContext, useRef } from \"react\";\nimport axios from \"axios\";\nimport { format } from \"timeago.js\";\nimport { Link } from \"react-router-dom\";\nimport { NestedModal, ReportModal } from \"../modelEdit/ModalEdit\";\n\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardActions,\n  Collapse,\n  Typography,\n  IconButton,\n  Avatar,\n  TextField,\n  Button,\n  Chip,\n  Menu,\n  MenuItem,\n} from \"@mui/material\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport ReportIcon from \"@mui/icons-material/Report\";\nimport {\n  MoreVert,\n  FavoriteBorder,\n  Favorite,\n  Comment,\n  MoreHoriz,\n} from \"@mui/icons-material\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport { SortableContainer, SortableElement } from \"react-sortable-hoc\";\n// import ReactPlayer from 'react-player';\nimport ReactPlayer from \"react-player/lazy\";\nimport ReactLoading from \"react-loading\";\n\nexport default function Post({ post, onPostUpdate, indexPost }) {\n  const { user } = useContext(AuthContext);\n  const [like, setLike] = useState(post.likes.length);\n  const [isLiked, setIsLiked] = useState(false);\n  const [comments, setComments] = useState([]);\n  const [commentsData, setCommentsData] = useState([]);\n  const [showAllComments, setShowAllComments] = useState(false);\n  const [newCommentText, setNewCommentText] = useState(\"\");\n  const [showComments, setShowComments] = useState(false);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [anchorElComment, setAnchorElComment] = useState(false);\n  const [commentIdToDelete, setCommentIdToDelete] = useState(null);\n  const [commentIdUser, setCommentIdUser] = useState(\"\");\n  const [loadingComment, setLoadingComment] = useState(false);\n  const maxDisplayedComments = 3;\n  const { user: currentUser } = useContext(AuthContext);\n  const [openModal, setOpenModal] = useState(false);\n  const [openReportModal, setOpenReportModal] = useState(false);\n  const [typeModal, setTypeModal] = useState(\"Post\");\n  const containerRef = useRef(null);\n  const [dataEdit, setdataEdit] = useState([]);\n  const [dataPUser, setdataPUser] = useState({});\n  const [dataEditID, setdataEditID] = useState(null);\n  const [isAddComment, setIsAddComment] = useState(false);\n  const createdAt = new Date(post.createdAt.seconds * 1000);\n  const formattedDate = format(createdAt);\n\n  //++++++++++++++++++ fetch Data +++++++++++++++++++\n  useEffect(() => {\n    setIsLiked(post.likes.includes(currentUser.member_id));\n  }, [currentUser.member_id, post.likes]);\n\n  useEffect(() => {\n    const source = axios.CancelToken.source();\n\n    const fetchUserPost = async () => {\n      try {\n        const res = await axios.get(`api/users/GETuser/${post.member_id}`);\n        const userData = res.data;\n        // console.log(\"User=\", userData[0]);\n        setdataPUser(userData[0]);\n      } catch (err) {\n        // Handle error\n        console.error(\"Failed to fetch user data:\", err);\n      }\n    };\n    const fetchComments = async () => {\n      try {\n        const resComments = await axios.get(\n          `/api/comments/${post.id}/Comments`\n        );\n        setComments(resComments.data);\n        setLoadingComment(true);\n      } catch (err) {\n        console.log(err);\n      } finally {\n        setLoadingComment(false);\n      }\n    };\n\n    fetchUserPost();\n    fetchComments();\n    handlePostUpdate(onPostUpdate);\n\n    return () => {\n      source.cancel(\"Component unmounted\");\n    };\n  }, [post.member_id, post.id, showComments]);\n\n  // console.log(\"Comments=\", comments);\n\n  //++++++++++ on Click Button +++++++++++\n\n  //Post----------------------------------------------------\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleEditPost = () => {\n    setdataEdit(post);\n    setdataEditID(post.id);\n    setTypeModal(\"Post\");\n    setOpenModal(true);\n    handleClose();\n  };\n\n  const handleReportPost = () => {\n    setdataEdit(post);\n    setdataEdit(\"\");\n    setOpenReportModal(true);\n    handleClose();\n  };\n\n  const handleReportUser = () => {\n    setdataEdit(post);\n    setdataEdit(\"\");\n    setOpenReportModal(true);\n    handleClose();\n  };\n\n  const handlePostUpdate = (updatedPost, type) => {\n    if (type === \"Post\") {\n      // Handle updated post\n\n      post = { ...post, ...updatedPost };\n    } else if (type === \"Comment\") {\n      const updatedCommentIndex = comments.findIndex(\n        (comment) => comment.id === updatedPost.id\n      );\n\n      if (updatedCommentIndex === -1) {\n        // Comment is not present in the comments array, add it\n        setComments((prevComments) => [...prevComments, updatedPost]);\n      } else {\n        // Comment is already present, update it\n        setComments((prevComments) => {\n          const updatedComments = [...prevComments];\n          updatedComments[updatedCommentIndex] = updatedPost;\n          return updatedComments;\n        });\n      }\n    } else if (type === \"Add Comment\") {\n      // Handle added comment\n      setComments((prevComments) => [...prevComments, updatedPost]);\n    } else {\n      console.log(\"Invalid type: \", type);\n    }\n  };\n\n  const handleDeletePost = async () => {\n    const requestBody = {\n      member_id: currentUser.member_id,\n    };\n\n    try {\n      const response = await axios.delete(`/api/posts/${post.id}`, {\n        data: requestBody,\n      });\n      const message = response.data.message;\n      // Handle the response message here\n      console.log(message);\n      window.location.reload();\n      handleClose();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  //ITEM OF POST ----------------------------------------------\n\n  const SortableItem = SortableElement(({ item, containerRef }) => {\n    const isImage = post.title === \"image\";\n\n    if (isImage) {\n      return (\n        <div className=\"shareImgItem\">\n          <img src={item.url} alt=\"Gallery Image\" className=\"shareImg\" />\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"shareVideoItem\">\n          <ReactPlayer\n            url={item.url}\n            className=\"shareVideo\"\n            width=\"640\"\n            height=\"360\"\n            controls\n            onClick={(event) => event.preventDefault()}\n          />\n        </div>\n      );\n    }\n  });\n\n  const SortableList = SortableContainer(({ items }) => {\n    return (\n      <div className=\"shareImgContainer\" ref={containerRef}>\n        {items.map((item, index) => (\n          <SortableItem\n            key={index}\n            item={item}\n            index={index}\n            containerRef={containerRef}\n          />\n        ))}\n      </div>\n    );\n  });\n\n  //Comment-------------------------------------------\n\n  const handleClickComment = (event, id) => {\n    setAnchorElComment(event.currentTarget);\n    const comment = comments.find((c) => c.id === id);\n    // console.log(comment)\n    setdataEdit(comment);\n    setCommentIdUser(comment.memberId);\n    setCommentIdToDelete(id);\n  };\n\n  const handleCloseComment = () => {\n    setAnchorElComment(null);\n  };\n\n  const handleEditComment = () => {\n    const comment = comments.find((c) => c.id === commentIdToDelete);\n    console.log(comment);\n    setdataEdit(comment);\n    setdataEditID(commentIdToDelete);\n    setTypeModal(\"Comment\");\n    setOpenModal(true);\n    handleCloseComment();\n  };\n\n  const handleDeleteComment = async () => {\n    console.log(`Delete Comment ${commentIdToDelete}`);\n    const requestBody = {\n      member_id: currentUser.member_id,\n    };\n\n    try {\n      const response = await axios.delete(\n        `/api/comments/${post.id}/comments/${commentIdToDelete}`,\n        { data: requestBody }\n      );\n      const message = response.data.message;\n      // Handle the response message here\n      console.log(message);\n\n      // Fetch the updated comments after deleting the comment\n      const resComments = await axios.get(`/api/comments/${post.id}/Comments`);\n      setComments(resComments.data);\n\n      handleClose();\n      setLoadingComment(true);\n    } catch (err) {\n      console.log(err);\n    } finally {\n      setLoadingComment(false);\n      handleClose();\n    }\n  };\n\n  const submitComment = () => {\n    setTypeModal(\"Add Comment\");\n    setdataEdit(\"\");\n    setIsAddComment(true);\n    setOpenModal(true);\n  };\n\n  //Like ------------------------------------------------\n\n  const likeHandler = async () => {\n    try {\n      await axios.put(`/api/posts/${post.id}/like`, {\n        member_id: currentUser.member_id,\n      });\n    } catch (err) {\n      console.log(err);\n    }\n\n    if (isLiked) {\n      setLike(like - 1);\n    } else {\n      setLike(like + 1);\n    }\n    setIsLiked(!isLiked);\n  };\n\n  return (\n    <div className=\"post\" key={indexPost}>\n      <Card className=\"postWrapper\">\n        <CardHeader\n          avatar={\n            <Link to={`/profile/${post.firstName}`}>\n              <Avatar\n                aria-label=\"recipe\"\n                src={post?.profilePicture}\n                style={{ width: \"39px\", height: \"39px\" }}\n              ></Avatar>\n            </Link>\n          }\n          title={`${post?.firstName} ${post?.lastName}`}\n          subheader={formattedDate}\n          action={[\n            <IconButton key=\"more\" onClick={handleClick}>\n              <MoreHoriz fontSize=\"small\" />\n            </IconButton>,\n            <Menu\n              key=\"menu\"\n              anchorEl={anchorEl}\n              open={Boolean(anchorEl)}\n              onClose={handleClose}\n              keepMounted\n            >\n              {dataPUser.member_id === user.member_id ? (\n                [\n                  <MenuItem key=\"edit\" onClick={handleEditPost}>\n                    <span>\n                      <EditIcon fontSize=\"small\" />\n                    </span>\n                    <span>Edit</span>\n                  </MenuItem>,\n                  <MenuItem key=\"delete\" onClick={handleDeletePost}>\n                    <span>\n                      <DeleteIcon fontSize=\"small\" />\n                    </span>\n                    <span>Delete</span>\n                  </MenuItem>,\n                ]\n              ) : (\n                <MenuItem key=\"report\" onClick={handleReportPost}>\n                  <span>\n                    <ReportIcon fontSize=\"small\" />\n                  </span>\n                  <span>Report Post</span>\n                </MenuItem>\n              )}\n            </Menu>,\n          ]}\n        />\n        <CardContent>\n          <Typography variant=\"body1\" className=\"postText\">\n            <span>{post?.content}</span>\n          </Typography>\n          <Typography variant=\"body2\" className=\"postText\">\n            {post?.tagpet.map((pet, i) => (\n              <span>\n                <Chip\n                  key={i}\n                  label={`#${pet}`}\n                  className=\"postChip\"\n                  style={{ color: \"#6200E8\" }}\n                />\n              </span>\n            ))}\n          </Typography>\n          <SortableList\n            items={post.img.map((item) => ({\n              type: item.endsWith(\".mp4\") ? \"video\" : \"image\",\n              url: item,\n            }))}\n            axis=\"xy\"\n          />\n        </CardContent>\n        <hr className=\"PostHr\" />\n        <div className=\"postBottom\">\n          <div className=\"postBottomLeft\">\n            <CardActions disableSpacing>\n              {isLiked ? (\n                <IconButton aria-label=\"add to favorites\" onClick={likeHandler}>\n                  <Favorite className=\"likeIcon\" style={{ color: \"#6200E8\" }} />\n                </IconButton>\n              ) : (\n                <IconButton aria-label=\"add to favorites\" onClick={likeHandler}>\n                  <FavoriteBorder\n                    className=\"likeIcon\"\n                    style={{ color: \"#6200E8\" }}\n                  />\n                </IconButton>\n              )}\n              <span className=\"postLikeCounter\">{like} people like it</span>\n            </CardActions>\n          </div>\n          <div className=\"postBottomRight\">\n            <CardActions disableSpacing>\n              <IconButton\n                aria-label=\"show more\"\n                sx={{ color: \"#6200E8\", right: 14 }}\n                onClick={() => setShowComments(!showComments)}\n              >\n                <Comment />\n                <p className=\"postCommentText\" underline=\"none\">\n                  <span>{comments.length} comments</span>\n                </p>\n              </IconButton>\n            </CardActions>\n          </div>\n        </div>\n        <Collapse in={showComments} timeout=\"auto\" unmountOnExit>\n          <hr className=\"PostHr\" />\n          {loadingComment ? (\n            <div className=\"loadingWrapper\">\n              <ReactLoading\n                type=\"spin\"\n                color=\"#6200E8\"\n                height={\"10%\"}\n                width={\"10%\"}\n              />\n            </div>\n          ) : (\n            <CardContent>\n              <Typography paragraph>Comments</Typography>\n              {comments\n                .slice(\n                  0,\n                  showAllComments ? comments.length : maxDisplayedComments\n                )\n                .map((comment, index) => {\n                  return (\n                    <div key={index} className=\"postComment\">\n                      <div className=\"postCommentProfile\">\n                        <CardHeader\n                          avatar={\n                            <Avatar\n                              aria-label=\"recipe\"\n                              src={comment?.profilePicture}\n                              sx={{ width: \"39px\", height: \"39px\" }}\n                            />\n                          }\n                          title={`${comment?.firstName} ${comment?.lastName}`}\n                          subheader={`${comment.content}`}\n                          action={\n                            <>\n                              <IconButton\n                                onClick={(event) =>\n                                  handleClickComment(event, comment.id)\n                                }\n                              >\n                                <MoreHoriz fontSize=\"small\" />\n                              </IconButton>\n                            </>\n                          }\n                        />\n                        <Menu\n                          anchorEl={anchorElComment || undefined} // Provide undefined if anchorElComment is null\n                          open={Boolean(anchorElComment)}\n                          onClose={handleCloseComment}\n                        >\n                          {user.member_id === commentIdUser ? (\n                            [\n                              <MenuItem key=\"edit\" onClick={handleEditComment}>\n                                <span>\n                                  <EditIcon fontSize=\"small\" />\n                                </span>\n                                <span>Edit</span>\n                              </MenuItem>,\n                              <MenuItem\n                                key=\"delete\"\n                                onClick={handleDeleteComment}\n                              >\n                                <span>\n                                  <DeleteIcon fontSize=\"small\" />\n                                </span>\n                                <span>Delete</span>\n                              </MenuItem>,\n                            ]\n                          ) : (\n                            <MenuItem key=\"report\" onClick={handleReportUser}>\n                              <span>\n                                <ReportIcon fontSize=\"small\" />\n                              </span>\n                              <span>Report User</span>\n                            </MenuItem>\n                          )}\n                        </Menu>\n                      </div>\n                    </div>\n                  );\n                })}\n              {comments.length > maxDisplayedComments && (\n                <Typography\n                  className=\"showMoreComments\"\n                  variant=\"body2\"\n                  color=\"primary\"\n                  onClick={() => setShowAllComments(!showAllComments)}\n                >\n                  {showAllComments ? \"Hide\" : \"Show More\"} Comments\n                </Typography>\n              )}\n              <Button variant=\"contained\" onClick={() => submitComment()}>\n                Comment\n              </Button>\n            </CardContent>\n          )}\n        </Collapse>\n      </Card>\n      {openModal && (\n        <NestedModal\n          key={indexPost}\n          onClose={() => setOpenModal(false)}\n          onContent={dataEdit}\n          onTitle={typeModal}\n          userId={currentUser?.member_id}\n          onContentID={post?.id}\n          onCommentsID={dataEditID}\n          onLoading={true}\n          isAddComment={isAddComment}\n          onPostUpdate={(updatedComment) =>\n            handlePostUpdate(updatedComment, typeModal)\n          }\n        />\n      )}\n      {openReportModal && (\n        <ReportModal\n          key={indexPost}\n          onClose={() => setOpenReportModal(false)}\n          onContent={dataEdit}\n          onTitle={typeModal}\n          userId={currentUser?.member_id}\n          onContentID={post?.id}\n          onCommentsID={dataEditID}\n          onLoading={true}\n          onPostUpdate={handlePostUpdate}\n        />\n      )}\n    </div>\n  );\n}\n","/Users/watthananick/pet-story-project/client/src/components/online/Online.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/components/closeFriend/CloseFriend.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/components/share/Share.jsx",["142","143","144","145","146","147"],[],"import \"./share.css\";\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/storage\";\nimport React, { useContext, useRef, useState, useEffect } from \"react\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport axios from \"axios\";\n\nimport {\n  Avatar,\n  Chip,\n  Autocomplete,\n  TextField,\n  Grid,\n  IconButton,\n  FormControl,\n  InputLabel,\n} from \"@mui/material\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport {\n  PermMedia,\n  Cancel,\n  Send as SendIcon,\n  PhotoCameraBack as PhotoCameraBackIcon,\n} from \"@mui/icons-material\";\nimport { SortableContainer, SortableElement } from \"react-sortable-hoc\";\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n};\n\nfirebase.initializeApp(firebaseConfig);\nconst storage = firebase.storage();\n\nexport default function Share({ onNewPost }) {\n  const { user } = useContext(AuthContext);\n  const desc = useRef();\n  const [typePets, setTypePets] = useState([]);\n  const [selectedTags, setSelectedTags] = useState([]);\n  const [files, setFiles] = useState([]);\n  const [typeData, setTypeData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [privacy, setPrivacy] = useState(\"normal\");\n  const MAX_TAGS_LIMIT = 3;\n\n  const privacyOptions = [\n    { label: \"à¸ªà¸²à¸à¸²à¸£à¸à¸°\", value: \"normal\" },\n    { label: \"à¸ªà¹à¸§à¸à¸à¸±à¸§\", value: \"private\" },\n    { label: \"à¹à¸à¸à¸²à¸°à¸à¸¹à¹à¸à¸´à¸à¸à¸²à¸¡\", value: \"followers\" },\n  ];\n\n  const onSortEnd = ({ oldIndex, newIndex }) => {\n    setFiles(arrayMove(files, oldIndex, newIndex));\n  };\n\n  const handlePrivacyChange = (event, value) => {\n    if (value) {\n      setPrivacy(value.value);\n    } else {\n      setPrivacy(\"normal\"); // Default to normal if no option is selected\n    }\n  };\n\n  const handleFileChange = (e) => {\n    const selectedFiles = Array.from(e.target.files).slice(0, 6); // Limit to 6 files\n\n    // File size limits\n    const imageMaxSize = 5 * 1024 * 1024; // 5 MB in bytes\n    const videoMaxSize = 100 * 1024 * 1024; // 100 MB in bytes\n\n    // Validate file sizes\n    const validFiles = selectedFiles.filter((file) => {\n      if (file.type.startsWith(\"image/\") && file.size <= imageMaxSize) {\n        return true; // Valid image file\n      }\n      if (file.type.startsWith(\"video/\") && file.size <= videoMaxSize) {\n        return true; // Valid video file\n      }\n      return false; // Invalid file\n    });\n\n    setFiles(validFiles);\n  };\n\n  const removeFile = (index) => {\n    const updatedFiles = [...files];\n    updatedFiles.splice(index, 1);\n    setFiles(updatedFiles);\n  };\n\n  const submitHandler = async (e) => {\n    e.preventDefault();\n\n    setLoading(true);\n\n    const storageRef = storage.ref();\n    const filePromises = files.map((file) => {\n      const fileName = Date.now() + file.name;\n      const fileRef = storageRef.child(`${user.member_id}/${fileName}`);\n      return fileRef.put(file);\n    });\n\n    try {\n      const uploadSnapshots = await Promise.all(filePromises);\n\n      const fileUrls = await Promise.all(\n        uploadSnapshots.map((snapshot) => snapshot.ref.getDownloadURL())\n      );\n\n      const newPost = {\n        title: typeData,\n        content: desc.current.value,\n        member_id: user.member_id,\n        likes: [],\n        tagpet: selectedTags.map((tag) => tag.nameType),\n        img: fileUrls,\n        comment: [],\n        status: privacy,\n      };\n\n      await axios.post(\"/api/posts\", newPost);\n      setFiles([]);\n      setTypeData(null);\n      setSelectedTags([]);\n      desc.current.value = \"\";\n\n      if (onNewPost) {\n        onNewPost();\n      }\n    } catch (err) {\n      console.log(err);\n      // Handle error here and display appropriate message to the user\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    const getTypePets = async () => {\n      try {\n        const res = await axios.get(\"/api/typePets\");\n        const data = res.data;\n        const typePets = data.map((item, index) => ({\n          id: index,\n          nameType: item.nameType,\n        }));\n        setTypePets(typePets);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    getTypePets();\n  }, []);\n  \n  \n\n  const SortableItem = SortableElement(({ item, index }) => {\n    if (item.type === \"image\") {\n      setTypeData(\"image\");\n      return (\n        <div className=\"shareImgItem\">\n          <img src={item.url} alt=\"Gallery Image\" className=\"shareImg\" />\n          <Cancel\n            className=\"shareCancelImg\"\n            onClick={() => removeFile(index)}\n          />\n        </div>\n      );\n    } else if (item.type === \"video\") {\n      setTypeData(\"video\");\n      return (\n        <div className=\"shareVideoItem\">\n          <video src={item.url} className=\"shareVideo\" controls />\n          <Cancel\n            className=\"shareCancelImg\"\n            onClick={() => removeFile(index)}\n          />\n        </div>\n      );\n    } else {\n      return null; // Exclude unsupported file types\n    }\n  });\n\n  const SortableList = SortableContainer(({ items }) => (\n    <div className=\"shareImgContainer\">\n      {items.map((item, index) => (\n        <div key={index}>\n          {\" \"}\n          {/* Assign a unique key to each child element */}\n          <SortableItem item={item} index={index} />\n        </div>\n      ))}\n    </div>\n  ));\n\n  function arrayMove(array, oldIndex, newIndex) {\n    if (newIndex >= array.length) {\n      let k = newIndex - array.length + 1;\n      while (k--) {\n        array.push(undefined);\n      }\n    }\n    array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n    return array;\n  }\n\n  return (\n    <div className=\"share\">\n      <div className=\"shareWrapper\">\n        <div className=\"shareTop\">\n          <Grid container alignItems=\"center\">\n            <Grid item xs={6} sm={6} md={3}>\n              <Avatar\n                aria-label=\"recipe\"\n                src={user.profilePicture}\n                sx={{ width: \"39px\", height: \"39px\", mr: 1 }}\n              />\n              <Autocomplete\n                id=\"margin-none\"\n                autoFocus\n                disableCloseOnSelect\n                fullWidth\n                selectOnFocus\n                autoHighlight\n                options={privacyOptions}\n                defaultValue={privacyOptions[0]}\n                getOptionLabel={(option) => option.label}\n                onChange={handlePrivacyChange}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    variant=\"standard\"\n                    size=\"small\"\n                    sx={{ color: \"#6309DE\", m: 1}}\n                  />\n                )}\n              />\n            </Grid>\n            <Grid item xs={12} sm={12} md={12}>\n              <TextField\n                fullWidth\n                placeholder={`What's on your mind, ${user.firstName}?`}\n                className=\"shareInput\"\n                variant=\"standard\"\n                size=\"small\"\n                rows={3}\n                multiline\n                inputRef={desc}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} md={12}>\n              <form className=\"shareBottom\" onSubmit={submitHandler}>\n                {/* Share options */}\n                <div className=\"shareOptions\">\n                  <div className=\"shareOption\">\n                    <label htmlFor=\"file\" className=\"shareOptionLabel\">\n                      <PhotoCameraBackIcon />\n                      {/* <PermMedia htmlColor=\"tomato\" className=\"shareIcon\" /> */}\n                      <span className=\"shareOptionText\">Photo or Video</span>\n                      <input\n                        style={{ display: \"none\" }}\n                        type=\"file\"\n                        id=\"file\"\n                        accept=\".png,.jpeg,.jpg,.gif,.mp4,.mov\"\n                        multiple\n                        onChange={handleFileChange}\n                      />\n                    </label>\n                  </div>\n                </div>\n                {/* Share images */}\n                <div className=\"shareImg\">\n                  <SortableList\n                    items={files.map((file, index) => ({\n                      type: file.type.startsWith(\"image/\") ? \"image\" : \"video\",\n                      url: URL.createObjectURL(file),\n                    }))}\n                    onSortEnd={onSortEnd}\n                    axis=\"xy\"\n                    distance={1}\n                  />\n                </div>\n                {/* Share tags */}\n                <div className=\"shareTags\">\n                  <Autocomplete\n                    multiple\n                    sx={{ m: 1 }}\n                    id=\"type-pets-select\"\n                    options={typePets}\n                    // defaultValue={typePets[0]}\n                    getOptionLabel={(option) => option.nameType}\n                    onChange={(event, value) => setSelectedTags(value)}\n                    value={selectedTags}\n                    limitTags={MAX_TAGS_LIMIT} // Set the limit for the number of tags\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        label=\"Type Pets\"\n                        variant=\"outlined\"\n                        size=\"small\"\n                      />\n                    )}\n                  />\n                </div>\n                {/* Share button */}\n                <div className=\"shareBottomOptions\">\n                  <LoadingButton\n                    type=\"submit\"\n                    variant=\"contained\"\n                    sx={{ backgroundColor: \"#6309DE\" }}\n                    startIcon={<SendIcon />}\n                    className=\"shareButton\"\n                    disabled={loading}\n                    loading={loading}\n                  >\n                    Share\n                  </LoadingButton>\n                </div>\n              </form>\n            </Grid>\n          </Grid>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/watthananick/pet-story-project/client/src/components/modelEdit/ModalEdit.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/components/search/Search.jsx",[],[],{"ruleId":"148","severity":1,"message":"149","line":45,"column":11,"nodeType":"150","messageId":"151","endLine":45,"endColumn":21},{"ruleId":"148","severity":1,"message":"152","line":48,"column":10,"nodeType":"150","messageId":"151","endLine":48,"endColumn":22},{"ruleId":"148","severity":1,"message":"153","line":48,"column":24,"nodeType":"150","messageId":"151","endLine":48,"endColumn":39},{"ruleId":"148","severity":1,"message":"154","line":1,"column":20,"nodeType":"150","messageId":"151","endLine":1,"endColumn":26},{"ruleId":"148","severity":1,"message":"155","line":11,"column":8,"nodeType":"150","messageId":"151","endLine":11,"endColumn":24},{"ruleId":"148","severity":1,"message":"156","line":20,"column":8,"nodeType":"150","messageId":"151","endLine":20,"endColumn":12},{"ruleId":"148","severity":1,"message":"152","line":46,"column":10,"nodeType":"150","messageId":"151","endLine":46,"endColumn":22},{"ruleId":"148","severity":1,"message":"153","line":46,"column":24,"nodeType":"150","messageId":"151","endLine":46,"endColumn":39},{"ruleId":"148","severity":1,"message":"157","line":52,"column":9,"nodeType":"150","messageId":"151","endLine":52,"endColumn":32},{"ruleId":"148","severity":1,"message":"158","line":104,"column":9,"nodeType":"150","messageId":"151","endLine":104,"endColumn":26},{"ruleId":"148","severity":1,"message":"159","line":108,"column":9,"nodeType":"150","messageId":"151","endLine":108,"endColumn":29},{"ruleId":"148","severity":1,"message":"160","line":2,"column":18,"nodeType":"150","messageId":"151","endLine":2,"endColumn":24},{"ruleId":"148","severity":1,"message":"161","line":7,"column":8,"nodeType":"150","messageId":"151","endLine":7,"endColumn":20},{"ruleId":"148","severity":1,"message":"162","line":14,"column":3,"nodeType":"150","messageId":"151","endLine":14,"endColumn":10},{"ruleId":"148","severity":1,"message":"163","line":16,"column":3,"nodeType":"150","messageId":"151","endLine":16,"endColumn":7},{"ruleId":"148","severity":1,"message":"164","line":18,"column":3,"nodeType":"150","messageId":"151","endLine":18,"endColumn":19},{"ruleId":"148","severity":1,"message":"165","line":19,"column":3,"nodeType":"150","messageId":"151","endLine":19,"endColumn":7},{"ruleId":"148","severity":1,"message":"166","line":20,"column":3,"nodeType":"150","messageId":"151","endLine":20,"endColumn":11},{"ruleId":"148","severity":1,"message":"167","line":21,"column":3,"nodeType":"150","messageId":"151","endLine":21,"endColumn":15},{"ruleId":"148","severity":1,"message":"168","line":22,"column":3,"nodeType":"150","messageId":"151","endLine":22,"endColumn":17},{"ruleId":"148","severity":1,"message":"169","line":32,"column":10,"nodeType":"150","messageId":"151","endLine":32,"endColumn":24},{"ruleId":"148","severity":1,"message":"170","line":17,"column":3,"nodeType":"150","messageId":"151","endLine":17,"endColumn":12},{"ruleId":"148","severity":1,"message":"171","line":27,"column":3,"nodeType":"150","messageId":"151","endLine":27,"endColumn":11},{"ruleId":"148","severity":1,"message":"172","line":44,"column":10,"nodeType":"150","messageId":"151","endLine":44,"endColumn":22},{"ruleId":"148","severity":1,"message":"173","line":44,"column":24,"nodeType":"150","messageId":"151","endLine":44,"endColumn":39},{"ruleId":"148","severity":1,"message":"174","line":46,"column":10,"nodeType":"150","messageId":"151","endLine":46,"endColumn":24},{"ruleId":"148","severity":1,"message":"175","line":46,"column":26,"nodeType":"150","messageId":"151","endLine":46,"endColumn":43},{"ruleId":"176","severity":1,"message":"177","line":106,"column":6,"nodeType":"178","endLine":106,"endColumn":45,"suggestions":"179"},{"ruleId":"180","severity":1,"message":"181","line":200,"column":11,"nodeType":"182","endLine":200,"endColumn":74},{"ruleId":"148","severity":1,"message":"163","line":10,"column":3,"nodeType":"150","messageId":"151","endLine":10,"endColumn":7},{"ruleId":"148","severity":1,"message":"183","line":14,"column":3,"nodeType":"150","messageId":"151","endLine":14,"endColumn":13},{"ruleId":"148","severity":1,"message":"184","line":15,"column":3,"nodeType":"150","messageId":"151","endLine":15,"endColumn":14},{"ruleId":"148","severity":1,"message":"185","line":16,"column":3,"nodeType":"150","messageId":"151","endLine":16,"endColumn":13},{"ruleId":"148","severity":1,"message":"186","line":20,"column":3,"nodeType":"150","messageId":"151","endLine":20,"endColumn":12},{"ruleId":"180","severity":1,"message":"181","line":167,"column":11,"nodeType":"182","endLine":167,"endColumn":74},"no-unused-vars","'isFetching' is assigned a value but never used.","Identifier","unusedVar","'showPassword' is assigned a value but never used.","'setShowPassword' is assigned a value but never used.","'useRef' is defined but never used.","'LockOutlinedIcon' is defined but never used.","'Card' is defined but never used.","'handleClickShowPassword' is assigned a value but never used.","'handleEmailChange' is assigned a value but never used.","'handlePasswordChange' is assigned a value but never used.","'Person' is defined but never used.","'ReactLoading' is defined but never used.","'Divider' is defined but never used.","'Chip' is defined but never used.","'CircularProgress' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'InputAdornment' is defined but never used.","'searchResponse' is assigned a value but never used.","'TextField' is defined but never used.","'MoreVert' is defined but never used.","'commentsData' is assigned a value but never used.","'setCommentsData' is assigned a value but never used.","'newCommentText' is assigned a value but never used.","'setNewCommentText' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'handlePostUpdate' and 'onPostUpdate'. Either include them or remove the dependency array.","ArrayExpression",["187"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donât need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'IconButton' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'PermMedia' is defined but never used.",{"desc":"188","fix":"189"},"Update the dependencies array to be: [post.member_id, post.id, showComments, handlePostUpdate, onPostUpdate]",{"range":"190","text":"191"},[3493,3532],"[post.member_id, post.id, showComments, handlePostUpdate, onPostUpdate]"]