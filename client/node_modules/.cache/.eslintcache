[{"/Users/watthananick/pet-story-project/client/src/index.js":"1","/Users/watthananick/pet-story-project/client/src/App.js":"2","/Users/watthananick/pet-story-project/client/src/context/AuthContext.js":"3","/Users/watthananick/pet-story-project/client/src/context/AuthReducer.js":"4","/Users/watthananick/pet-story-project/client/src/pages/login/Login.jsx":"5","/Users/watthananick/pet-story-project/client/src/pages/profile/Profile.jsx":"6","/Users/watthananick/pet-story-project/client/src/pages/typepet/TypePet.jsx":"7","/Users/watthananick/pet-story-project/client/src/pages/home/Home.jsx":"8","/Users/watthananick/pet-story-project/client/src/pages/register/Register.jsx":"9","/Users/watthananick/pet-story-project/client/src/apiCalls.js":"10","/Users/watthananick/pet-story-project/client/src/components/sidebar/Sidebar.jsx":"11","/Users/watthananick/pet-story-project/client/src/components/feed/Feed.jsx":"12","/Users/watthananick/pet-story-project/client/src/components/topbar/Topbar.jsx":"13","/Users/watthananick/pet-story-project/client/src/components/rightbar/Rightbar.jsx":"14","/Users/watthananick/pet-story-project/client/src/dummyData.js":"15","/Users/watthananick/pet-story-project/client/src/components/post/Post.jsx":"16","/Users/watthananick/pet-story-project/client/src/components/online/Online.jsx":"17","/Users/watthananick/pet-story-project/client/src/components/closeFriend/CloseFriend.jsx":"18","/Users/watthananick/pet-story-project/client/src/components/share/Share.jsx":"19","/Users/watthananick/pet-story-project/client/src/components/modelEdit/ModalEdit.jsx":"20"},{"size":313,"mtime":1617783295000,"results":"21","hashOfConfig":"22"},{"size":1060,"mtime":1684768149987,"results":"23","hashOfConfig":"22"},{"size":1080,"mtime":1684936330557,"results":"24","hashOfConfig":"22"},{"size":913,"mtime":1617783295000,"results":"25","hashOfConfig":"22"},{"size":3153,"mtime":1684936311264,"results":"26","hashOfConfig":"22"},{"size":2207,"mtime":1684938620660,"results":"27","hashOfConfig":"22"},{"size":2727,"mtime":1684938332250,"results":"28","hashOfConfig":"22"},{"size":426,"mtime":1617783295000,"results":"29","hashOfConfig":"22"},{"size":3340,"mtime":1684940287387,"results":"30","hashOfConfig":"22"},{"size":1085,"mtime":1684936731576,"results":"31","hashOfConfig":"22"},{"size":2286,"mtime":1683125741554,"results":"32","hashOfConfig":"22"},{"size":2179,"mtime":1684856144519,"results":"33","hashOfConfig":"22"},{"size":4755,"mtime":1684967909879,"results":"34","hashOfConfig":"22"},{"size":4305,"mtime":1684944006611,"results":"35","hashOfConfig":"22"},{"size":2525,"mtime":1684483667982,"results":"36","hashOfConfig":"22"},{"size":13516,"mtime":1684972883753,"results":"37","hashOfConfig":"22"},{"size":669,"mtime":1684747399781,"results":"38","hashOfConfig":"22"},{"size":468,"mtime":1684767554320,"results":"39","hashOfConfig":"22"},{"size":8909,"mtime":1684967475894,"results":"40","hashOfConfig":"22"},{"size":1438,"mtime":1684973003716,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"ldi8gy",{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"45"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/watthananick/pet-story-project/client/src/index.js",[],[],[],"/Users/watthananick/pet-story-project/client/src/App.js",[],[],"/Users/watthananick/pet-story-project/client/src/context/AuthContext.js",[],[],"/Users/watthananick/pet-story-project/client/src/context/AuthReducer.js",[],[],"/Users/watthananick/pet-story-project/client/src/pages/login/Login.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/pages/profile/Profile.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/pages/typepet/TypePet.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/pages/home/Home.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/pages/register/Register.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/apiCalls.js",["106"],[],"import axios from \"axios\";\nimport jwtDecode from \"jwt-decode\";\n\nexport const loginCall = async (userCredential, dispatch) => {\n  dispatch({ type: \"LOGIN_START\" });\n\n  try {\n    const res = await axios.post(\"/api/auth/login\", userCredential);\n    const user = res?.data;\n    const data = user?.user.user.uid\n    \n    console.log('User=',data)\n    fetchUserData(data, dispatch)\n    // Dispatch LOGIN_SUCCESS action with the decoded user data\n    // dispatch({ type: \"LOGIN_SUCCESS\", payload: data.data });\n  } catch (err) {\n    // Dispatch LOGIN_FAILURE action with the error\n    dispatch({ type: \"LOGIN_FAILURE\", payload: err.response.data.error });\n  }\n};\n\n\n\nexport const fetchUserData = async (userId, dispatch) => {\n  try {\n    const res = await axios.get(`/api/users?member_id=${userId}&firstName=`);\n    const userData = res.data;\n    console.log('User=',userData)\n    // Dispatch action to update user data in the state\n    dispatch({ type: \"LOGIN_SUCCESS\", payload: userData });\n  } catch (err) {\n    // Handle error\n    console.error(\"Failed to fetch user data:\", err);\n  }\n};\n\n","/Users/watthananick/pet-story-project/client/src/components/sidebar/Sidebar.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/components/feed/Feed.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/components/topbar/Topbar.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/components/rightbar/Rightbar.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/dummyData.js",[],[],"/Users/watthananick/pet-story-project/client/src/components/post/Post.jsx",["107","108"],[],"import \"./post.css\";\nimport { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport { format } from \"timeago.js\";\nimport { Link } from \"react-router-dom\";\nimport NestedModal from \"../modelEdit/ModalEdit\";\nimport ReactDOM from 'react-dom';\n\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardActions,\n  Collapse,\n  Typography,\n  IconButton,\n  Avatar,\n  TextField,\n  Button,\n  Chip,\n  Menu, \n  MenuItem,\n} from \"@mui/material\";\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport { MoreVert, FavoriteBorder, Favorite, Comment} from \"@mui/icons-material\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport { SortableContainer, SortableElement } from \"react-sortable-hoc\";\n// import ReactPlayer from 'react-player';\nimport ReactPlayer from 'react-player/lazy';\nimport ReactLoading from 'react-loading';\n\nexport default function Post({ post }) {\n  const [like, setLike] = useState(post.likes.length);\n  const [isLiked, setIsLiked] = useState(false);\n  const [user, setUser] = useState({});\n  const [comments, setComments] = useState([]);\n  const [commentsData, setCommentsData] = useState([]);\n  const [showAllComments, setShowAllComments] = useState(false);\n  const [newCommentText, setNewCommentText] = useState(\"\");\n  const [showComments, setShowComments] = useState(false);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [anchorElComment, setAnchorElComment] = useState(null);\n  const [commentIdToDelete, setCommentIdToDelete] = useState(null);\n  const [loadingComment, setLoadingComment] = useState(false);\n  const maxDisplayedComments = 3;\n  const { user: currentUser } = useContext(AuthContext);\n  const [openModal, setOpenModal] = useState(false);\n\n  // const PF = process.env.REACT_APP_PUBLIC_FOLDER;\n\n  const createdAt = new Date(post.createdAt.seconds * 1000);\n  const formattedDate = format(createdAt);\n\n  useEffect(() => {\n    setIsLiked(post.likes.includes(currentUser.member_id));\n  }, [currentUser.member_id, post.likes]);\n\n  useEffect(() => {\n    const source = axios.CancelToken.source();\n    const fetchUser = async () => {\n      try {\n        const res = await axios.get(`/api/users?member_id=${post.member_id}&firstName=`);\n        setUser(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    \n\n    const fetchComments = async () => {\n\n      try {\n        const resComments = await axios.get(`/api/comments/${post.id}/comments`);\n        setComments(resComments.data);\n        setLoadingComment(true);\n      } catch (err) {\n        console.log(err);\n      } finally {\n        setLoadingComment(false);\n      } \n    };\n\n    fetchUser();\n    fetchComments();\n    return () => {\n      source.cancel('Component unmounted');\n    };\n  }, [post.member_id, post.id]);\n  \n  // console.log(\"comment\",comments) \n  \n  useEffect(() => {\n    if (showComments) {\n      const fetchData = async () => {\n        const promises = comments.map((comment) => {\n          return axios.get(`/api/users?member_id=${comment.memberId}&firstName=`);\n        });\n  \n        try {\n          const responses = await Promise.all(promises);\n          const commentUsers = responses.map((res) => res.data);\n          setCommentsData(commentUsers);\n          setLoadingComment(true);\n        } catch (err) {\n          console.log(err);\n        } finally {\n          setLoadingComment(false);\n        } \n      };\n  \n      fetchData();\n    } else {\n      // Clear commentsData when showComments is false\n      setCommentsData([]);\n    }\n  }, [comments, showComments]);  \n  \n  \n   \n  \n    const handleClick = (event) => {\n      setAnchorEl(event.currentTarget);\n    };\n    \n    const handleClickComment = (event, id) => {\n      setAnchorElComment(event.currentTarget);\n      setCommentIdToDelete(id); // Store the comment ID in the state\n    };\n    \n  \n    const handleClose = () => {\n      setAnchorEl(null);\n    };\n    \n    const handleCloseComment = () => {\n      setAnchorElComment(null);\n    };\n  \n    const handleEditPost = () => {\n      // Set a state variable to show the edit modal\n      setOpenModal(true);\n      handleClose();\n    };\n    \n    \n  \n    const handleDeletePost = async () => {\n      const requestBody = {\n        member_id: currentUser.member_id\n      };\n      \n      try {\n        const response = await axios.delete(`/api/posts/${post.id}`, { data: requestBody });\n        const message = response.data.message;\n        // Handle the response message here\n        console.log(message);\n        window.location.reload();\n        handleClose();\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    \n    const handleDeleteComment = async (commentId) => {\n      console.log(`Delete Comment ${commentId}`);\n      const requestBody = {\n        member_id: currentUser.member_id\n      };\n    \n      try {\n        const response = await axios.delete(`/api/comments/${post.id}/comments/${commentId}`, { data: requestBody });\n        const message = response.data.message;\n        // Handle the response message here\n        console.log(message);\n    \n        // Fetch the updated comments after deleting the comment\n        const resComments = await axios.get(`/api/comments/${post.id}/comments`);\n        setComments(resComments.data);\n    \n        handleClose();\n        setLoadingComment(true);\n      } catch (err) {\n        console.log(err);\n      } finally {\n        setLoadingComment(false);\n        handleClose();\n      } \n    };\n\n  const likeHandler = async () => {\n    try {\n      await axios.put(`/api/posts/${post.id}/like`, { member_id: currentUser.member_id });\n    } catch (err) {\n      console.log(err);\n    }\n\n    if (isLiked) {\n      setLike(like - 1);\n    } else {\n      setLike(like + 1);\n    }\n    setIsLiked(!isLiked);\n  };\n\n  const SortableItem = SortableElement(({ item }) => {\n    const isImage =  post.title === 'image';\n    // console.log(isImage);\n  \n  \n    if (isImage) {\n      return (\n        <div className=\"shareImgItem\">\n          <img src={item.url} alt=\"Gallery Image\" className=\"shareImg\" />\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"shareVideoItem\">\n          <ReactPlayer\n            url={item.url} \n            className=\"shareVideo\" \n            width=\"640\"\n            height=\"360\" \n            controls\n            onClick={(event) => event.preventDefault()}\n          />\n\n        </div>\n      );\n    }\n  });\n  \n  const SortableList = SortableContainer(({ items }) => (\n    <div className=\"shareImgContainer\">\n      {items.map((item, index) => (\n        <div key={index}>\n          <SortableItem item={item} index={index} />\n        </div>\n      ))}\n    </div>\n  ));\n\n  const submitComment = async () => {\n    try {\n      // Submit the comment\n      await axios.post(`/api/comments/${post.id}/comments`, {\n        content: newCommentText,\n        member_id: currentUser.member_id,\n      });\n  \n      // Clear the comment input field\n      setNewCommentText(\"\");\n  \n      // Fetch the updated comments\n      const resComments = await axios.get(`/api/comments/${post.id}/comments`);\n      setComments(resComments.data);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  \n  return (\n    <div className=\"post\">\n      <Card className=\"postWrapper\">\n        <CardHeader\n          avatar={\n            <Link to={`/profile/${user.firstName}`}>\n              <Avatar aria-label=\"recipe\" src={user.profilePicture} style={{ width: '39px', height: '39px' }}>\n              </Avatar>\n            </Link>\n          }\n          title={`${user.firstName} ${user.lastName}`}\n          subheader={formattedDate}\n          action={\n            <>\n              <IconButton onClick={handleClick}>\n                <MoreVert />\n              </IconButton>\n              <Menu\n                anchorEl={anchorEl}\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n                keepMounted\n              >\n                <MenuItem onClick={handleEditPost}>\n                  <span><EditIcon /></span>\n                  <span>Edit</span>\n                </MenuItem>\n                <MenuItem \n                  onClick={handleDeletePost} \n                >  \n                <span><DeleteIcon /></span>\n                <span>Delete</span>\n                </MenuItem>\n              </Menu>\n            </>\n          }\n        />\n       <CardContent>\n        <Typography variant=\"body1\" className=\"postText\">\n          {post?.content}\n        </Typography>\n        <Typography variant=\"body2\" className=\"postText\">\n          {post?.tagpet.map((pet) => (\n            <Chip key={pet} label={`#${pet}`} className=\"postChip\" style={{ color: '#6200E8' }}/>\n          ))}\n        </Typography>\n        <SortableList\n          items={post.img.map((item) => ({\n            type: item.endsWith('.mp4') ? 'video' : 'image',\n            url: item,\n          }))}\n          axis=\"xy\"\n        />\n      </CardContent>\n        <hr className=\"PostHr\" />\n        <div className=\"postBottom\">\n          <div className=\"postBottomLeft\">\n            <CardActions disableSpacing>\n              {isLiked ? (\n                <IconButton aria-label=\"add to favorites\" onClick={likeHandler}>\n                  <Favorite className=\"likeIcon\" style={{ color: '#6200E8' }} />\n                </IconButton>\n              ) : (\n                <IconButton aria-label=\"add to favorites\" onClick={likeHandler}>\n                  <FavoriteBorder className=\"likeIcon\" style={{ color: '#6200E8' }} />\n                </IconButton>\n              )}\n              <span className=\"postLikeCounter\">{like} people like it</span>\n            </CardActions>\n          </div>\n          <div className=\"postBottomRight\">\n            <CardActions disableSpacing>\n              <IconButton\n                aria-label=\"show more\"\n                sx={{ color: '#6200E8',  right: 14 }}\n                onClick={() => setShowComments(!showComments)}\n              >\n                <Comment />\n                <p className=\"postCommentText\" underline=\"none\">\n                   {comments.length} comments\n                </p>\n              </IconButton>\n            </CardActions>\n          </div>\n        </div>\n        <Collapse in={showComments} timeout=\"auto\" unmountOnExit>\n        <hr className=\"PostHr\" />\n        {loadingComment ? (\n          <div className=\"loadingWrapper\">\n            <ReactLoading type=\"spin\" color=\"#6200E8\" height={'10%'} width={'10%'} />\n          </div>\n          ) : (\n          <CardContent>\n            <Typography paragraph>Comments</Typography>\n            {comments.slice(0, showAllComments ? comments.length : maxDisplayedComments).map((comment, index) => {\n              const commentData = commentsData.find(data => data.member_id === comment.memberId);\n              return (\n                <div key={index} className=\"postComment\">\n                  <div className=\"postCommentProfile\">\n                    <CardHeader\n                      avatar={\n                        <Avatar\n                          aria-label=\"recipe\"\n                          src={commentData?.profilePicture}\n                          sx={{ width: '39px', height: '39px' }}\n                        />\n                      }\n                      title={`${commentData?.firstName} ${commentData?.lastName}`}\n                      subheader={`${comment.content}`}\n                      action={\n                        <>\n                          <IconButton onClick={(event) => handleClickComment(event, comment.id)}>\n                            <MoreVert />\n                          </IconButton>\n                        </>\n                      }\n                    />\n                    <Menu\n                      anchorEl={anchorElComment}\n                      open={Boolean(anchorElComment)}\n                      onClose={handleCloseComment}\n                    >\n                      <MenuItem onClick={handleEditPost}>\n                        <span><EditIcon /></span>\n                        <span>Edit</span>\n                      </MenuItem>\n                      <MenuItem \n                        onClick={() => handleDeleteComment(commentIdToDelete)}\n                      >\n                        <span><DeleteIcon /></span>\n                        <span>Delete</span>\n                      </MenuItem>\n                    </Menu>\n                  </div>\n                </div>\n              );\n            })}\n            {comments.length > maxDisplayedComments && (\n              <Typography\n                className=\"showMoreComments\"\n                variant=\"body2\"\n                color=\"primary\"\n                onClick={() => setShowAllComments(!showAllComments)}\n              >\n                {showAllComments ? \"Hide\" : \"Show More\"} Comments\n              </Typography>\n            )}\n            <TextField\n              label=\"Add a comment\"\n              variant=\"outlined\"\n              value={newCommentText}\n              onChange={(e) => setNewCommentText(e.target.value)}\n              fullWidth\n              style={{ color: isLiked ? 'inherit' : '#6200E8' }}\n            />\n            <Button\n              variant=\"contained\"\n              onClick={() => submitComment(post.id, newCommentText, user.member_id)}\n            >\n              Comment\n            </Button>\n          </CardContent>\n          )}\n        </Collapse>\n      </Card>\n      {openModal && <NestedModal onClose={() => setOpenModal(false)} postContent={post?.content} />}\n    </div>\n  );\n}\n",[],"/Users/watthananick/pet-story-project/client/src/components/online/Online.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/components/closeFriend/CloseFriend.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/components/share/Share.jsx",["109","110","111","112"],[],"/Users/watthananick/pet-story-project/client/src/components/modelEdit/ModalEdit.jsx",[],[],{"ruleId":"113","severity":1,"message":"114","line":2,"column":8,"nodeType":"115","messageId":"116","endLine":2,"endColumn":17},{"ruleId":"113","severity":1,"message":"117","line":7,"column":8,"nodeType":"115","messageId":"116","endLine":7,"endColumn":16},{"ruleId":"118","severity":1,"message":"119","line":214,"column":11,"nodeType":"120","endLine":214,"endColumn":74},{"ruleId":"113","severity":1,"message":"121","line":10,"column":3,"nodeType":"115","messageId":"116","endLine":10,"endColumn":12},{"ruleId":"113","severity":1,"message":"122","line":11,"column":3,"nodeType":"115","messageId":"116","endLine":11,"endColumn":9},{"ruleId":"113","severity":1,"message":"123","line":41,"column":10,"nodeType":"115","messageId":"116","endLine":41,"endColumn":15},{"ruleId":"118","severity":1,"message":"119","line":154,"column":9,"nodeType":"120","endLine":154,"endColumn":72},"no-unused-vars","'jwtDecode' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'TextField' is defined but never used.","'Button' is defined but never used.","'error' is assigned a value but never used."]