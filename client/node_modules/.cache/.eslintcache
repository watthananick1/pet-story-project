[{"/Users/watthananick/pet-story-project/client/src/index.js":"1","/Users/watthananick/pet-story-project/client/src/App.js":"2","/Users/watthananick/pet-story-project/client/src/context/AuthContext.js":"3","/Users/watthananick/pet-story-project/client/src/context/AuthReducer.js":"4","/Users/watthananick/pet-story-project/client/src/pages/login/Login.jsx":"5","/Users/watthananick/pet-story-project/client/src/pages/profile/Profile.jsx":"6","/Users/watthananick/pet-story-project/client/src/pages/typepet/TypePet.jsx":"7","/Users/watthananick/pet-story-project/client/src/pages/home/Home.jsx":"8","/Users/watthananick/pet-story-project/client/src/pages/register/Register.jsx":"9","/Users/watthananick/pet-story-project/client/src/apiCalls.js":"10","/Users/watthananick/pet-story-project/client/src/components/sidebar/Sidebar.jsx":"11","/Users/watthananick/pet-story-project/client/src/components/feed/Feed.jsx":"12","/Users/watthananick/pet-story-project/client/src/components/topbar/Topbar.jsx":"13","/Users/watthananick/pet-story-project/client/src/components/rightbar/Rightbar.jsx":"14","/Users/watthananick/pet-story-project/client/src/dummyData.js":"15","/Users/watthananick/pet-story-project/client/src/components/post/Post.jsx":"16","/Users/watthananick/pet-story-project/client/src/components/online/Online.jsx":"17","/Users/watthananick/pet-story-project/client/src/components/closeFriend/CloseFriend.jsx":"18","/Users/watthananick/pet-story-project/client/src/components/share/Share.jsx":"19","/Users/watthananick/pet-story-project/client/src/components/modelEdit/ModalEdit.jsx":"20","/Users/watthananick/pet-story-project/client/src/components/search/Search.jsx":"21","/Users/watthananick/pet-story-project/client/src/components/dialogModel/dialogModel.jsx":"22","/Users/watthananick/pet-story-project/client/src/components/dialogModel/dialogModelCover.jsx":"23"},{"size":313,"mtime":1617783295000,"results":"24","hashOfConfig":"25"},{"size":1098,"mtime":1686466401160,"results":"26","hashOfConfig":"25"},{"size":2534,"mtime":1686824518529,"results":"27","hashOfConfig":"25"},{"size":1024,"mtime":1686746940930,"results":"28","hashOfConfig":"25"},{"size":6718,"mtime":1686570754325,"results":"29","hashOfConfig":"25"},{"size":7301,"mtime":1686836363931,"results":"30","hashOfConfig":"25"},{"size":3411,"mtime":1686008859944,"results":"31","hashOfConfig":"25"},{"size":426,"mtime":1617783295000,"results":"32","hashOfConfig":"25"},{"size":9976,"mtime":1685919688768,"results":"33","hashOfConfig":"25"},{"size":544,"mtime":1686461816113,"results":"34","hashOfConfig":"25"},{"size":2326,"mtime":1686573547784,"results":"35","hashOfConfig":"25"},{"size":3509,"mtime":1686574447413,"results":"36","hashOfConfig":"25"},{"size":8425,"mtime":1686574146023,"results":"37","hashOfConfig":"25"},{"size":4586,"mtime":1686573065823,"results":"38","hashOfConfig":"25"},{"size":2525,"mtime":1684483667982,"results":"39","hashOfConfig":"25"},{"size":19790,"mtime":1686724401047,"results":"40","hashOfConfig":"25"},{"size":669,"mtime":1686573967611,"results":"41","hashOfConfig":"25"},{"size":468,"mtime":1684767554320,"results":"42","hashOfConfig":"25"},{"size":10730,"mtime":1686725800144,"results":"43","hashOfConfig":"25"},{"size":6804,"mtime":1686748847218,"results":"44","hashOfConfig":"25"},{"size":1724,"mtime":1686801191901,"results":"45","hashOfConfig":"25"},{"size":6315,"mtime":1686841443226,"results":"46","hashOfConfig":"25"},{"size":6372,"mtime":1686836596610,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"ldi8gy",{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"51"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"51"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"51"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"51"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"51"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"51"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"51"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"51"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"51"},"/Users/watthananick/pet-story-project/client/src/index.js",[],[],[],"/Users/watthananick/pet-story-project/client/src/App.js",[],[],"/Users/watthananick/pet-story-project/client/src/context/AuthContext.js",[],[],"/Users/watthananick/pet-story-project/client/src/context/AuthReducer.js",[],[],"/Users/watthananick/pet-story-project/client/src/pages/login/Login.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/pages/profile/Profile.jsx",["127"],[],"import \"./profile.css\";\nimport Topbar from \"../../components/topbar/Topbar\";\nimport Sidebar from \"../../components/sidebar/Sidebar\";\nimport Feed from \"../../components/feed/Feed\";\nimport Rightbar from \"../../components/rightbar/Rightbar\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\nimport ReactLoading from \"react-loading\";\nimport Cookies from \"js-cookie\";\nimport { Avatar, Badge, IconButton, Typography } from \"@mui/material\";\nimport LocalSeeIcon from \"@mui/icons-material/LocalSee\";\nimport { styled } from \"@mui/material/styles\";\nimport FormDialogImage from \"../../components/dialogModel/dialogModel\";\nimport FilePreviewerCover from \"../../components/dialogModel/dialogModelCover\";\n\nexport default function Profile() {\n  const [user, setUser] = useState({});\n  const { firstName } = useParams();\n  const [open, setOpen] = useState(false);\n  const [openCover, setOpenCover] = useState(false);\n  const [isUser, setIsUser] = useState(false);\n  const token = Cookies.get(\"token\");\n  const dataUser = JSON.parse(localStorage.getItem(\"user\"));\n\n  useEffect(() => {\n    setIsUser(firstName === dataUser?.firstName);\n    // console.log(\"firstName\", firstName);\n    // console.log(\"UfirstName\", dataUser.firstName);\n  }, [firstName, dataUser]);\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const res = await axios.get(`/api/users/user/${firstName}`, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n        setUser(res?.data[0]);\n        console.log(\"data\", res?.data[0]);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchUser();\n  }, [firstName]);\n\n  const Image = styled(\"div\")(({ theme }) => ({\n    position: \"relative\",\n    button: 150,\n    width: \"100%\",\n    height: 250,\n    backgroundImage: `url(\"${\n      user.coverPicture ? user.coverPicture : \"/assets/person/noCover.png\"\n    }\")`,\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\",\n    cursor: \"pointer\",\n    \"&:hover $ImageBackdrop\": {\n      opacity: 0,\n    },\n    \"&:hover $ImageMarked\": {\n      opacity: 0,\n    },\n    \"&:hover $ImageTitle\": {\n      border: \"4px solid currentColor\",\n    },\n  }));\n\n  const ImageTitle = styled(Typography)(({ theme }) => ({\n    position: \"relative\",\n    padding: theme.spacing(2),\n    fontWeight: \"bold\",\n    color: theme.palette.common.white,\n    backgroundColor: \"rgba(0, 0, 0, 0.6)\",\n  }));\n\n  const ImageBackdrop = styled(\"div\")(({ theme }) => ({\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n    backgroundColor: theme.palette.common.black,\n    opacity: 0.4,\n    transition: theme.transitions.create(\"opacity\"),\n  }));\n\n  const ImageMarked = styled(\"span\")(({ theme }) => ({\n    height: 3,\n    width: 18,\n    backgroundColor: theme.palette.common.white,\n    position: \"absolute\",\n    bottom: -2,\n    left: \"calc(50% - 9px)\",\n    transition: theme.transitions.create(\"opacity\"),\n  }));\n\n  if (Object.keys(user).length === 0) {\n    return (\n      <div className=\"loadingWrapper\">\n        <ReactLoading\n          type=\"spin\"\n          color=\"#6200E8\"\n          height={\"10%\"}\n          width={\"10%\"}\n        />\n      </div>\n    );\n  }\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  \n  const handleClickOpenCover = () => {\n    setOpenCover(true);\n  };\n\n  console.log(isUser);\n\n  return (\n    <>\n      <Topbar />\n      <div className=\"profile\">\n        <Sidebar />\n        <div className=\"profileRight\">\n          <div className=\"profileRightTop\">\n            <div className=\"profileCover\">\n              {isUser ? (\n                <>\n                  <Image onClick={handleClickOpenCover}>\n                    <ImageTitle >\n                      <LocalSeeIcon\n                        fontSize=\"small\"\n                        sx={{\n                          color: \"#6200E8\",\n                          m: 1,\n                        }}\n                      />\n                      <span>Change</span>\n                      <ImageMarked className=\"MuiImageMarked-root\" />\n                    </ImageTitle>\n                    <ImageBackdrop className=\"ImageBackdrop\" />\n                  </Image>\n                  <Badge\n                    overlap=\"circular\"\n                    sx={{\n                      top: \"-100px\",\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      alignItems: \"center\",\n                      justifyContent: \"center\",\n                    }}\n                    className=\"profileUserImg\"\n                    anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\n                    badgeContent={\n                      <label htmlFor=\"avatar-upload\">\n                        <IconButton\n                          onClick={handleClickOpen}\n                          color=\"white\"\n                          aria-label=\"Change Avatar\"\n                          component=\"span\"\n                          sx={{\n                            backgroundColor: \"white\",\n                            border: \"0.5px solid #E2D7F0\",\n                            borderRadius: \"50%\",\n                          }}\n                        >\n                          <LocalSeeIcon\n                            fontSize=\"small\"\n                            sx={{\n                              color: \"#6200E8\",\n                            }}\n                          />\n                        </IconButton>\n                      </label>\n                    }\n                  >\n                    <Avatar\n                      alt=\"Profile Picture\"\n                      src={user.profilePicture || \"/assets/person/noAvatar.png\"}\n                      style={{ width: \"150px\", height: \"150px\" }}\n                    />\n                  </Badge>\n                </>\n              ) : (\n                <>\n                  <img\n                    className=\"profileCoverImg\"\n                    src={\n                      user.coverPicture\n                        ? user.coverPicture\n                        : \"/assets/person/noCover.png\"\n                    }\n                    alt=\"\"\n                  />\n                  <Avatar\n                    className=\"profileUserImg\"\n                    alt=\"Profile Picture\"\n                    src={user.profilePicture || \"/assets/person/noAvatar.png\"}\n                    style={{ width: \"150px\", height: \"150px\" }}\n                  />\n                </>\n              )}\n            </div>\n            <div className=\"profileInfo\">\n              <h4 className=\"profileInfoName\">\n                {user.firstName} {user.lastName}\n              </h4>\n              <span className=\"profileInfoDesc\">{user?.desc}</span>\n            </div>\n          </div>\n          <div className=\"profileRightBottom\">\n            <Feed firstName={firstName} onProfile={true} />\n            <Rightbar user={user} />\n          </div>\n          {open ? (\n            <>\n              <FormDialogImage onClose={() => setOpen(false)} />\n            </>\n          ) : null}\n          {openCover ? (\n            <>\n              <FilePreviewerCover onClose={() => setOpenCover(false)} />\n            </>\n          ) : null}\n        </div>\n      </div>\n    </>\n  );\n}\n","/Users/watthananick/pet-story-project/client/src/pages/typepet/TypePet.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/pages/home/Home.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/pages/register/Register.jsx",["128","129","130","131","132","133","134","135"],[],"import { useState, useRef } from \"react\";\nimport \"./register.css\";\nimport Avatar from \"@mui/material/Avatar\";\nimport Button from \"@mui/material/Button\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport TextField from \"@mui/material/TextField\";\nimport Link from \"@mui/material/Link\";\nimport Paper from \"@mui/material/Paper\";\nimport Box from \"@mui/material/Box\";\nimport Grid from \"@mui/material/Grid\";\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\nimport Typography from \"@mui/material/Typography\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport { useHistory } from \"react-router\";\nimport axios from \"axios\";\nimport Visibility from \"@mui/icons-material/Visibility\";\nimport VisibilityOff from \"@mui/icons-material/VisibilityOff\";\nimport IconButton from \"@mui/material/IconButton\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport Card from \"@mui/material/Card\";\n\nfunction Copyright(props) {\n  return (\n    <Typography\n      variant=\"body2\"\n      color=\"text.secondary\"\n      align=\"center\"\n      {...props}\n    >\n      {\"Copyright © \"}\n      <Link color=\"inherit\" href=\"\">\n        Pet story\n      </Link>{\" \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\n\nfunction Register() {\n  const history = useHistory();\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(\"\");\n  const [dateOfBirth, setDateOfBirth] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [passwordVisible, setPasswordVisible] = useState(false);\n  const [ConfirmVisible, setConfirmVisible] = useState(false);\n\n  const handleClickShowPassword = () => {\n    setPasswordVisible(!passwordVisible);\n  };\n\n  const handleClickShowConfirm = () => {\n    setConfirmVisible(!ConfirmVisible);\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    if (confirmPassword.current.value !== password) {\n      confirmPassword.current.setCustomValidity(\"Passwords don't match!\");\n    } else {\n      const user = {\n        firstName: firstName,\n        lastName: lastName,\n        email: email,\n        password: password,\n        dateOfBirth: dateOfBirth,\n        status: \"active\",\n        followers: [],\n        followings: [],\n        statusUser: \"USER\",\n        typePets: [],\n        profilePicture: \"\",\n        coverPicture: \"\",\n      };\n      try {\n        const res = await axios.post(\"/api/auth/register\", user);\n        if (res.status === 200) {\n          localStorage.setItem(\"Uid\", res.data.member_id);\n          history.push({\n            pathname: \"/typepet\",\n            state: res.data.member_id, // pass the user object as a prop\n          }); // redirect to the TypePet page\n        } else {\n          console.log(\"Registration failed. Status:\", res.status);\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n\n  const handleFirstNameChange = (event) => {\n    setFirstName(event.target.value);\n  };\n\n  const handleLastNameChange = (event) => {\n    setLastName(event.target.value);\n  };\n\n  const handleEmailChange = (event) => {\n    setEmail(event.target.value);\n  };\n\n  const handlePasswordChange = (event) => {\n    setPassword(event.target.value);\n  };\n\n  const handleDateOfBirthChange = (event) => {\n    setDateOfBirth(event.target.value);\n  };\n\n  const handleConfirmPasswordChange = (event) => {\n    setConfirmPassword(event.target.value);\n  };\n\n  const theme = createTheme();\n\n  return (\n    <div className=\"login\">\n      <div className=\"loginWrapper\">\n        <ThemeProvider theme={theme}>\n          <Grid container component=\"main\">\n            <CssBaseline />\n            <Grid\n              item\n              xs={false}\n              sm={4}\n              md={7}\n              sx={{\n                backgroundImage:\n                  \"url(https://firebasestorage.googleapis.com/v0/b/pet-story-f51e3.appspot.com/o/mainData%2FloginImage1.jpg?alt=media&token=4547e22e-e032-4eb9-82fa-84551789d27e)\",\n                backgroundRepeat: \"no-repeat\",\n                backgroundColor: (t) =>\n                  t.palette.mode === \"light\"\n                    ? t.palette.grey[50]\n                    : t.palette.grey[900],\n                backgroundSize: \"cover\",\n                backgroundPosition: \"center\",\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\",\n              }}\n            />\n            <Grid\n              item\n              xs={12}\n              sm={8}\n              md={5}\n              component={Paper}\n              elevation={6}\n              square\n            >\n              <Box\n                sx={{\n                  my: 8,\n                  mx: 4,\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  alignItems: \"center\",\n                }}\n              >\n                <Avatar sx={{ m: 1, bgcolor: \"secondary.main\" }}>\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                  Register\n                </Typography>\n                <Box\n                  component=\"form\"\n                  noValidate\n                  onSubmit={handleSubmit}\n                  sx={{ mt: 2 }}\n                >\n                  <TextField\n                    sx={{ mb: 2 }}\n                    autoComplete=\"fname\"\n                    name=\"firstName\"\n                    required\n                    fullWidth\n                    id=\"firstName\"\n                    label=\"First Name\"\n                    autoFocus\n                    value={firstName}\n                    onChange={handleFirstNameChange}\n                  />\n                  <TextField\n                    sx={{ mb: 2 }}\n                    required\n                    fullWidth\n                    id=\"lastName\"\n                    label=\"Last Name\"\n                    name=\"lastName\"\n                    autoComplete=\"lname\"\n                    value={lastName}\n                    onChange={handleLastNameChange}\n                  />\n                  <TextField\n                    sx={{ mb: 2 }}\n                    required\n                    fullWidth\n                    id=\"email\"\n                    label=\"Email Address\"\n                    name=\"email\"\n                    autoComplete=\"email\"\n                  />\n                  <TextField\n                    sx={{ mb: 2 }}\n                    required\n                    fullWidth\n                    name=\"password\"\n                    label=\"Password\"\n                    type={passwordVisible ? \"text\" : \"password\"}\n                    id=\"password\"\n                    autoComplete=\"current-password\"\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            aria-label=\"toggle password visibility\"\n                            onClick={() => setPasswordVisible(!passwordVisible)}\n                            edge=\"end\"\n                          >\n                            {passwordVisible ? (\n                              <VisibilityOff />\n                            ) : (\n                              <Visibility />\n                            )}\n                          </IconButton>\n                        </InputAdornment>\n                      ),\n                    }}\n                  />\n                  <TextField\n                    sx={{ mb: 2 }}\n                    required\n                    fullWidth\n                    id=\"confirmPassword\"\n                    label=\"Confirm Password\"\n                    name=\"confirmPassword\"\n                    type={ConfirmVisible ? \"text\" : \"password\"}\n                    autoComplete=\"new-password\"\n                    value={confirmPassword}\n                    onChange={handleConfirmPasswordChange}\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            aria-label=\"toggle password visibility\"\n                            onClick={handleClickShowConfirm}\n                            edge=\"end\"\n                          >\n                            {ConfirmVisible ? (\n                              <VisibilityOff />\n                            ) : (\n                              <Visibility />\n                            )}\n                          </IconButton>\n                        </InputAdornment>\n                      ),\n                    }}\n                  />\n                  <TextField\n                    required\n                    fullWidth\n                    id=\"dateOfBirth\"\n                    label=\"Date of Birth\"\n                    type=\"date\"\n                    name=\"dateOfBirth\"\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    value={dateOfBirth}\n                    onChange={handleDateOfBirthChange}\n                  />\n                  <Button\n                    type=\"submit\"\n                    fullWidth\n                    variant=\"contained\"\n                    sx={{ mt: 3, mb: 2 }}\n                  >\n                    Sign In\n                  </Button>\n                  <Grid container justifyContent=\"flex-end\">\n                    <Grid item>\n                      <Link href=\"/login\" variant=\"body2\">\n                        Already have an account? Sign in\n                      </Link>\n                    </Grid>\n                  </Grid>\n                  <Copyright sx={{ mt: 5 }} />\n                </Box>\n              </Box>\n            </Grid>\n          </Grid>\n        </ThemeProvider>\n      </div>\n    </div>\n  );\n}\n\nexport default Register;\n","/Users/watthananick/pet-story-project/client/src/apiCalls.js",[],[],"/Users/watthananick/pet-story-project/client/src/components/sidebar/Sidebar.jsx",["136"],[],"import \"./sidebar.css\";\nimport {\n  RssFeed,\n  Chat,\n  PlayCircleFilledOutlined,\n  Group,\n  Bookmark,\n  HelpOutline,\n  WorkOutline,\n  Event,\n  School,\n} from \"@material-ui/icons\";\nimport { Users } from \"../../dummyData\";\nimport CloseFriend from \"../closeFriend/CloseFriend\";\nimport Cookies from \"js-cookie\";\n\nexport default function Sidebar() {\n  return (\n    <div className=\"sidebar\">\n      <div className=\"sidebarWrapper\">\n        <ul className=\"sidebarList\">\n          <li className=\"sidebarListItem\">\n            <RssFeed className=\"sidebarIcon\" />\n            <span className=\"sidebarListItemText\">Feed</span>\n          </li>\n          <li className=\"sidebarListItem\">\n            <Chat className=\"sidebarIcon\" />\n            <span className=\"sidebarListItemText\">Chats</span>\n          </li>\n          <li className=\"sidebarListItem\">\n            <PlayCircleFilledOutlined className=\"sidebarIcon\" />\n            <span className=\"sidebarListItemText\">Videos</span>\n          </li>\n          <li className=\"sidebarListItem\">\n            <Group className=\"sidebarIcon\" />\n            <span className=\"sidebarListItemText\">Groups</span>\n          </li>\n          <li className=\"sidebarListItem\">\n            <Bookmark className=\"sidebarIcon\" />\n            <span className=\"sidebarListItemText\">Bookmarks</span>\n          </li>\n          <li className=\"sidebarListItem\">\n            <HelpOutline className=\"sidebarIcon\" />\n            <span className=\"sidebarListItemText\">Questions</span>\n          </li>\n          <li className=\"sidebarListItem\">\n            <WorkOutline className=\"sidebarIcon\" />\n            <span className=\"sidebarListItemText\">Jobs</span>\n          </li>\n          <li className=\"sidebarListItem\">\n            <Event className=\"sidebarIcon\" />\n            <span className=\"sidebarListItemText\">Events</span>\n          </li>\n          <li className=\"sidebarListItem\">\n            <School className=\"sidebarIcon\" />\n            <span className=\"sidebarListItemText\">Courses</span>\n          </li>\n        </ul>\n        <button className=\"sidebarButton\">Show More</button>\n        <hr className=\"sidebarHr\" />\n        <ul className=\"sidebarFriendList\">\n          {Users.map((user, index) => (\n            <CloseFriend key={index} user={user} />\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n","/Users/watthananick/pet-story-project/client/src/components/feed/Feed.jsx",["137"],[],"import { useContext, useEffect, useState } from \"react\";\nimport Post from \"../post/Post\";\nimport Share from \"../share/Share\";\nimport \"./feed.css\";\nimport axios from \"axios\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport ReactLoading from \"react-loading\";\nimport io from \"socket.io-client\";\nimport Cookies from \"js-cookie\";\n\nexport default function Feed({ firstName, onProfile }) {\n  const [posts, setPosts] = useState([]);\n  const { user } = useContext(AuthContext);\n  const [loading, setLoading] = useState(true);\n  const token = Cookies.get(\"token\");\n\n  useEffect(() => {\n    const source = axios.CancelToken.source();\n    const socket = io.connect(process.env.PATH_ID); // Fix the environment variable name\n    const fetchPosts = async () => {\n      try {\n        const currentTime = new Date().getTime();\n        setLoading(true);\n        const res = await axios.get(`/api/posts/${user.member_id}/date`, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n          cancelToken: source.token,\n        });\n        const sortedPosts = res.data.sort((a, b) => {\n          const timeDiffA = Math.abs(\n            currentTime - new Date(a.createdAt.seconds * 1000).getTime()\n          );\n          const timeDiffB = Math.abs(\n            currentTime - new Date(b.createdAt.seconds * 1000).getTime()\n          );\n          return timeDiffA - timeDiffB;\n        });\n        setPosts(sortedPosts);\n      } catch (err) {\n        if (axios.isCancel(err)) {\n          console.log(\"Request canceled:\", err.message);\n        } else {\n          console.log(err);\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    const fetchUserPosts = async () => {\n      try {\n        const currentTime = new Date().getTime();\n\n        setLoading(true);\n        const res = await axios.get(`/api/posts/user/${firstName}/date`, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n        const sortedPosts = res.data.sort((a, b) => {\n          const timeDiffA = Math.abs(\n            currentTime - new Date(a.createdAt.seconds * 1000).getTime()\n          );\n          const timeDiffB = Math.abs(\n            currentTime - new Date(b.createdAt.seconds * 1000).getTime()\n          );\n          return timeDiffA - timeDiffB;\n        });\n        setPosts(sortedPosts);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    const handleNewPost = (newPost) => {\n      setPosts((prevPosts) => [newPost, ...prevPosts]);\n    };\n\n    if (onProfile) {\n      fetchUserPosts();\n    } else {\n      fetchPosts();\n    }\n\n    socket.on(\"newPost\", handleNewPost);\n\n    return () => {\n      source.cancel(\"Component unmounted\");\n      console.log(\"Component unmounted\", source);\n      socket.off(\"newPost\", handleNewPost);\n      socket.disconnect();\n    };\n  }, [onProfile, firstName, user.member_id]);\n\n  return (\n    <div className=\"feed\">\n      <div className=\"feedWrapper\">\n        {!firstName || firstName === user?.firstName ? <Share /> : null}\n        {loading ? (\n          <div className=\"loadingWrapper\">\n            <ReactLoading\n              type=\"spin\"\n              color=\"#6200E8\"\n              height={\"10%\"}\n              width={\"10%\"}\n            />\n          </div>\n        ) : (\n          <>\n            {posts.map((p, i) => (\n              <Post key={i} isPost={p} indexPost={i} />\n            ))}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","/Users/watthananick/pet-story-project/client/src/components/topbar/Topbar.jsx",["138","139","140","141","142","143","144","145","146","147"],[],"import \"./topbar.css\";\nimport {\n  Search,\n  Person,\n  Chat,\n  Notifications,\n  Settings,\n  Logout,\n} from \"@mui/icons-material\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { useContext, useState, useEffect, useRef } from \"react\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport axios from \"axios\";\nimport ReactLoading from \"react-loading\";\nimport Cookies from \"js-cookie\";\n\nimport {\n  Avatar,\n  Menu,\n  MenuItem,\n  ListItemIcon,\n  Divider,\n  TextField,\n  Chip,\n  Stack,\n  CircularProgress,\n  List,\n  ListItem,\n  ListItemText,\n  InputAdornment,\n} from \"@mui/material\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport { performSearch } from \"../search/Search\";\n\nexport default function Topbar() {\n  const { user } = useContext(AuthContext);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [searchOptions, setSearchOptions] = useState([]);\n  const [searchResponse, setSearchResponse] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const open = Boolean(anchorEl);\n  const history = useHistory();\n  const inputRef = useRef(null);\n  const token = Cookies.get(\"token\");\n\n  const handleClick = () => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n    setAnchorEl(null);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleProfileClick = () => {\n    handleClose();\n    history.push(`/profile/${user?.firstName}`);\n  };\n\n  const handleSearchProfileClick = (firstName) => {\n    handleClose();\n    history.push(`/profile/${firstName}`);\n  };\n\n  const handleLogout = async () => {\n    try {\n      const response = await axios.get(\"/api/auth/logout\", {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      console.log(response.data.message); // \"Logout successful\"\n      Cookies.remove(\"token\");\n      localStorage.clear();\n      window.location.href = `/`;\n    } catch (error) {\n      console.error(error.response.data.error); // \"Logout failed\"\n    }\n    handleClose();\n  };\n\n  useEffect(() => {\n    const fetchSearchResults = async () => {\n      setLoading(true);\n      const trimmedSearchValue = searchValue && searchValue.trim();\n      const response = await performSearch(trimmedSearchValue);\n      setLoading(false);\n      setSearchResponse(response);\n\n      if (response) {\n        setSearchOptions(response);\n      } else {\n        setSearchOptions([]);\n      }\n    };\n\n    fetchSearchResults();\n  }, [searchValue]);\n\n  const handleSearchChange = (event) => {\n    const { value } = event.target;\n    setSearchValue(value);\n    console.log(\"Search= \", value);\n  };\n\n  return (\n    <div className=\"topbarContainer\">\n      <div className=\"topbarLeft\">\n        <Link to=\"/\" style={{ textDecoration: \"none\" }}>\n          <span className=\"logo\">Pet Story</span>\n        </Link>\n      </div>\n      <div className=\"topbarCenter\">\n        <div className=\"searchbar\">\n          <Search className=\"searchIcon\" />\n          <Autocomplete\n            // Styles for Autocomplete component\n            sx={{\n              display: \"inline-block\",\n              width: \"100%\",\n              outline: \"none\",\n              \"& input\": {\n                bgcolor: \"background.paper\",\n                color: (theme) =>\n                  theme.palette.getContrastText(theme.palette.background.paper),\n              },\n            }}\n            size=\"small\"\n            onClick={handleClick}\n            id=\"custom-input\"\n            loading={loading}\n            options={searchOptions}\n            getOptionLabel={(option) =>\n              `${option.firstName} ${option.lastName}` || option.content || \"\"\n            }\n            renderInput={(params) => (\n              <>\n                <TextField\n                  {...params}\n                  size=\"small\"\n                  variant=\"standard\"\n                  sx={{\n                    mt: 2,\n                    mb: 2,\n                    boxShadow: \"none\",\n                    width: \"97%\",\n                    borderRadius: 30,\n                    outline: \"none\",\n                    border: \"none\",\n                  }}\n                  onChange={handleSearchChange}\n                  placeholder=\"Search\"\n                />\n              </>\n            )}\n            renderOption={(props, option) => {\n              if (option.type === \"User\") {\n                return (\n                  <li {...props}>\n                    <Stack\n                      direction=\"row\"\n                      alignItems=\"center\"\n                      onClick={() =>\n                        handleSearchProfileClick(option?.firstName)\n                      }\n                    >\n                      <Avatar\n                        src={`${option.profilePicture}`}\n                        sx={{ width: 35, height: 35, mt: 0.5, mb: 0.5, mr: 1 }}\n                      />\n                      <span>\n                        {option?.firstName} {option?.lastName}\n                      </span>\n                    </Stack>\n                  </li>\n                );\n              }\n              if (option.type === \"Post\") {\n                return (\n                  <li {...props}>\n                    <Stack direction=\"row\" alignItems=\"center\">\n                      <span>{`Post ${option.content}`}</span>\n                    </Stack>\n                  </li>\n                );\n              }\n              return null;\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"topbarRight\">\n        <div className=\"topbarLinks\"></div>\n        <div className=\"topbarIcons\">\n          <div className=\"topbarIconItem\">\n            {/* <Person\n              onClick={(event) => setAnchorEl(event.currentTarget)}\n              className=\"topbarIcon\"\n            /> */}\n            <Menu\n              anchorEl={anchorEl}\n              open={open}\n              onClose={handleClose}\n              onClick={handleClose}\n              PaperProps={{\n                elevation: 0,\n                sx: {\n                  overflow: \"visible\",\n                  filter: \"drop-shadow(0px 2px 8px rgba(0,0,0,0.32))\",\n                  mt: 1.5,\n                  \"& .MuiAvatar-root\": {\n                    width: 32,\n                    height: 32,\n                    ml: -0.5,\n                    mr: 1,\n                  },\n                  \"&:before\": {\n                    content: '\"\"',\n                    display: \"block\",\n                    position: \"absolute\",\n                    top: 0,\n                    right: 14,\n                    width: 10,\n                    height: 10,\n                    bgcolor: \"background.paper\",\n                    transform: \"translateY(-50%) rotate(45deg)\",\n                    zIndex: 0,\n                  },\n                },\n              }}\n              transformOrigin={{ horizontal: \"right\", vertical: \"top\" }}\n              anchorOrigin={{ horizontal: \"right\", vertical: \"bottom\" }}\n            >\n              <MenuItem onClick={handleProfileClick}>\n                <span>\n                  <Avatar />\n                  <span>Profile</span>\n                </span>\n              </MenuItem>\n              <MenuItem onClick={handleProfileClick}>\n                <ListItemIcon>\n                  <Settings fontSize=\"small\" />\n                </ListItemIcon>\n                Settings\n              </MenuItem>\n              <MenuItem onClick={handleLogout}>\n                <ListItemIcon>\n                  <Logout fontSize=\"small\" />\n                </ListItemIcon>\n                Logout\n              </MenuItem>\n            </Menu>\n          </div>\n        </div>\n        <div className=\"topbarIconItem\">\n          <Link\n            to=\"/messenger\"\n            style={{ color: \"inherit\", textDecoration: \"none\" }}\n          >\n            <Chat className=\"topbarIcon\" />\n          </Link>\n          <span className=\"topbarIconBadge\">1</span>\n        </div>\n        <div className=\"topbarIconItem\">\n          <Notifications className=\"topbarIcon\" />\n          <span className=\"topbarIconBadge\">1</span>\n        </div>\n        <div>\n          <Avatar\n            aria-label=\"profile\"\n            src={user?.profilePicture}\n            sx={{ width: 35, height: 35, mt: 0.5, mb: 0.5 }}\n            onClick={(event) => setAnchorEl(event.currentTarget)}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/watthananick/pet-story-project/client/src/components/rightbar/Rightbar.jsx",["148"],[],"import \"./rightbar.css\";\nimport { Users } from \"../../dummyData\";\nimport Online from \"../online/Online\";\nimport { useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport { Add, Remove } from \"@material-ui/icons\";\nimport Cookies from \"js-cookie\";\n\nimport {\n  Avatar,\n} from \"@mui/material\";\n\nexport default function Rightbar({ user }) {\n  // const PF = process.env.REACT_APP_PUBLIC_FOLDER;\n  const [friends, setFriends] = useState([]);\n  const { user: currentUser, dispatch } = useContext(AuthContext);\n  const [followed, setFollowed] = useState(\n    currentUser.followers.includes(user?.member_id)\n  );\n  const token = Cookies.get(\"token\");\n  \n  //++++++++++++++++++ fetch Data +++++++++++++++++++\n\n  useEffect(() => {\n    const getFriends = async () => {\n      try {\n        const friendList = await axios.get(`/api/users/friends/${user.member_id}`, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n        setFriends(friendList.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    getFriends();\n  }, [user]);\n  \n  //++++++++++ on Click Button +++++++++++\n\n  const handleClick = async () => {\n    try {\n      if (followed) {\n        await axios.put(`/api/users/${user?.member_id}/unfollow`, {\n          member_id: currentUser?.member_id,\n        });\n        dispatch({ type: \"UNFOLLOW\", payload: user?.member_id });\n      } else {\n        await axios.put(`/api/users/${user?.member_id}/follow`, {\n          member_id: currentUser?.member_id,\n        });\n        dispatch({ type: \"FOLLOW\", payload: user?.member_id });\n      }\n      setFollowed(!followed);\n    } catch (err) {\n    }\n  };\n\n  const HomeRightbar = () => {\n    return (\n      <>\n        <div className=\"birthdayContainer\">\n          <img className=\"birthdayImg\" src=\"assets/gift.png\" alt=\"\" />\n          <span className=\"birthdayText\">\n            <b>Pola Foster</b> and <b>3 other friends</b> have a birhday today.\n          </span>\n        </div>\n        <img className=\"rightbarAd\" src=\"assets/ad.png\" alt=\"\" />\n        <h4 className=\"rightbarTitle\">Online Friends</h4>\n        <ul className=\"rightbarFriendList\">\n          {Users.map((u, index) => (\n            <Online key={index} user={u} />\n          ))}\n        </ul>\n      </>\n    );\n  };\n\n  const ProfileRightbar = () => {\n    return (\n      <>\n        {user?.firstName !== currentUser?.firstName && (\n          <button className=\"rightbarFollowButton\" onClick={handleClick}>\n            {followed ? \"Unfollow\" : \"Follow\"}\n            {followed ? <Remove /> : <Add />}\n          </button>\n        )}\n        <h4 className=\"rightbarTitle\">User information</h4>\n        <div className=\"rightbarInfo\">\n          <div className=\"rightbarInfoItem\">\n            <span className=\"rightbarInfoKey\">City:</span>\n            <span className=\"rightbarInfoValue\">{user.city ? user?.city : \"-\"}</span>\n          </div>\n          <div className=\"rightbarInfoItem\">\n            <span className=\"rightbarInfoKey\">From:</span>\n            <span className=\"rightbarInfoValue\">{user.from ? user?.from : \"-\"}</span>\n          </div>\n          <div className=\"rightbarInfoItem\">\n            <span className=\"rightbarInfoKey\">Relationship:</span>\n            <span className=\"rightbarInfoValue\">\n              {user?.relationship === 1\n                ? \"Single\"\n                : user?.relationship === 1\n                ? \"Married\"\n                : \"-\"}\n            </span>\n          </div>\n        </div>\n        <h4 className=\"rightbarTitle\">User friends</h4>\n        <div className=\"rightbarFollowings\">\n          {friends.map((friend) => (\n            <Link\n              to={\"/profile/\" + friend?.firstName}\n              style={{ textDecoration: \"none\" }}\n            >\n              <div className=\"rightbarFollowing\">\n                <Avatar\n                  className=\"rightbarFollowingImg\"\n                  aria-label=\"recipe\"\n                  src={friend.profilePicture ? friend?.profilePicture : \"/assets/person/noAvatar.png\"}\n                  style={{ width: \"39px\", height: \"39px\" }}\n                ></Avatar>\n                <span className=\"rightbarFollowingName\">{friend?.firstName} {friend?.lastName}</span>\n              </div>\n            </Link>\n          ))}\n        </div>\n      </>\n    );\n  };\n  return (\n    <div className=\"rightbar\">\n      <div className=\"rightbarWrapper\">\n        {user ? <ProfileRightbar /> : <HomeRightbar />}\n      </div>\n    </div>\n  );\n}\n","/Users/watthananick/pet-story-project/client/src/dummyData.js",[],[],"/Users/watthananick/pet-story-project/client/src/components/post/Post.jsx",["149","150","151","152","153","154","155","156","157"],[],"import \"./post.css\";\nimport { useState, useEffect, useContext, useRef } from \"react\";\nimport axios from \"axios\";\nimport { format } from \"timeago.js\";\nimport { Link } from \"react-router-dom\";\nimport { NestedModal, ReportModal } from \"../modelEdit/ModalEdit\";\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport { FacebookProvider, EmbeddedPost, EmbeddedVideo } from \"react-facebook\";\nimport { SortableContainer, SortableElement } from \"react-sortable-hoc\";\nimport ReactPlayer from \"react-player\";\nimport Cookies from \"js-cookie\";\n\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardActions,\n  Collapse,\n  Typography,\n  IconButton,\n  Avatar,\n  TextField,\n  Button,\n  Chip,\n  Menu,\n  MenuItem,\n} from \"@mui/material\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport ReportIcon from \"@mui/icons-material/Report\";\nimport {\n  MoreVert,\n  FavoriteBorder,\n  Favorite,\n  Comment,\n  MoreHoriz,\n} from \"@mui/icons-material\";\nimport { AuthContext } from \"../../context/AuthContext\";\n// import ReactPlayer from 'react-player';\nimport ReactLoading from \"react-loading\";\nimport ImageList from \"@mui/material/ImageList\";\nimport ImageListItem from \"@mui/material/ImageListItem\";\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nconst firestore = firebase.firestore();\n\nexport default function Post({ isPost, onPostUpdate, indexPost }) {\n  const { user } = useContext(AuthContext);\n  const [post, setPost] = useState(isPost);\n  const [like, setLike] = useState(post.likes.length);\n  const [isLiked, setIsLiked] = useState(false);\n  const [comments, setComments] = useState([]);\n  const [showAllComments, setShowAllComments] = useState(false);\n  const [showComments, setShowComments] = useState(false);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [anchorElComment, setAnchorElComment] = useState(false);\n  const [commentIdToDelete, setCommentIdToDelete] = useState(null);\n  const [commentIdUser, setCommentIdUser] = useState(\"\");\n  const [loadingComment, setLoadingComment] = useState(false);\n  const maxDisplayedComments = 3;\n  const { user: currentUser } = useContext(AuthContext);\n  const [openModal, setOpenModal] = useState(false);\n  const [openReportModal, setOpenReportModal] = useState(false);\n  const [typeModal, setTypeModal] = useState(\"Post\");\n  const containerRef = useRef(null);\n  const [dataEdit, setdataEdit] = useState([]);\n  const [dataEditID, setdataEditID] = useState(null);\n  const [isAddComment, setIsAddComment] = useState(false);\n  const createdAt = new Date(post.createdAt.seconds * 1000);\n  const formattedDate = format(createdAt);\n  const token = Cookies.get(\"token\");\n  // const socket = io.connect(process.env.PATH_ID);\n\n  //++++++++++++++++++ fetch Data +++++++++++++++++++\n  useEffect(() => {\n    setIsLiked(post.likes.includes(currentUser.member_id));\n  }, [currentUser.member_id, post.likes]);\n\n  //Like ------------------------------------------------\n\n  const likeHandler = async () => {\n    try {\n      await axios.put(`/api/posts/${post.id}/like`, {\n        member_id: currentUser.member_id,\n      });\n    } catch (err) {\n      console.log(err);\n    }\n\n    if (isLiked) {\n      setLike(like - 1);\n    } else {\n      setLike(like + 1);\n    }\n    setIsLiked(!isLiked);\n  };\n\n  useEffect(() => {\n    const source = axios.CancelToken.source();\n\n    const fetchComments = async () => {\n      try {\n        const resComments = await axios.get(\n          `/api/comments/${post.id}/Comments`,{\n            headers: {\n              Authorization: `Bearer ${token}`,\n            },\n          }\n        );\n        setComments(resComments.data);\n        setLoadingComment(true);\n      } catch (err) {\n        console.log(err);\n      } finally {\n        setLoadingComment(false);\n      }\n    };\n\n    fetchComments();\n    handlePostUpdate(onPostUpdate);\n\n    return () => {\n      source.cancel(\"Component unmounted\");\n    };\n  }, [post.member_id, post.id, showComments]);\n\n  useEffect(() => {\n    const postRef = firestore.collection(\"Posts\").doc(post.id);\n    let unsubscribeUser;\n\n    const unsubscribePost = postRef.onSnapshot((postSnapshot) => {\n      const updatedPost = postSnapshot.data();\n\n      const userRef = firestore\n        .collection(\"Users\")\n        .where(\"member_id\", \"==\", updatedPost.member_id);\n\n      unsubscribeUser = userRef.onSnapshot((userSnapshot) => {\n        if (!userSnapshot.empty) {\n          userSnapshot.docs.forEach((userDoc) => {\n            const userData = userDoc.data();\n            setPost((prevPost) => ({\n              ...prevPost,\n              firstName: userData.firstName,\n              lastName: userData.lastName,\n              profilePicture: userData.profilePicture,\n            }));\n          });\n\n          setLike(updatedPost.likes.length);\n          setIsLiked(updatedPost.likes.includes(currentUser.member_id));\n        } else {\n          // Handle case when no user document matches the query\n          console.log(\"No matching user document found.\");\n        }\n      });\n    });\n\n    return () => {\n      unsubscribePost();\n      unsubscribeUser();\n    };\n  }, [post.id, post.likes]);\n\n  // console.log(\"Comments=\", comments);\n\n  //++++++++++ on Click Button +++++++++++\n\n  //Post----------------------------------------------------\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleEditPost = () => {\n    setdataEdit(post);\n    setdataEditID(post.id);\n    setTypeModal(\"Post\");\n    setOpenModal(true);\n    handleClose();\n  };\n\n  const handleReportPost = () => {\n    setdataEdit(post);\n    setdataEdit(\"\");\n    setOpenReportModal(true);\n    handleClose();\n  };\n\n  const handleReportUser = () => {\n    setdataEdit(post);\n    setdataEdit(\"\");\n    setOpenReportModal(true);\n    handleClose();\n  };\n\n  const handlePostUpdate = (updatedPost, type) => {\n    if (type === \"Post\") {\n      setPost({ ...post, ...updatedPost });\n    } else if (type === \"Comment\") {\n      const updatedCommentIndex = comments.findIndex(\n        (comment) => comment.id === updatedPost.id\n      );\n\n      if (updatedCommentIndex === -1) {\n        // Comment is not present in the comments array, add it\n        setComments((prevComments) => [...prevComments, updatedPost]);\n      } else {\n        // Comment is already present, update it\n        setComments((prevComments) => {\n          const updatedComments = [...prevComments];\n          updatedComments[updatedCommentIndex] = updatedPost;\n          return updatedComments;\n        });\n      }\n    } else if (type === \"Add Comment\") {\n      // Handle added comment\n      setComments((prevComments) => [...prevComments, updatedPost]);\n    } else {\n      console.log(\"Invalid type: \", type);\n    }\n  };\n\n  const handleDeletePost = async () => {\n    const requestBody = {\n      member_id: currentUser.member_id,\n    };\n\n    try {\n      const response = await axios.delete(`/api/posts/${post.id}`, {\n        data: requestBody,\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      const message = response.data.message;\n      // Handle the response message here\n      console.log(message);\n      window.location.reload();\n      handleClose();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  //ITEM OF POST ----------------------------------------------\n\n  const SortableItem = SortableElement(({ item }) => {\n    const isImage = post.title === \"image\";\n\n    if (isImage) {\n      return (\n        <div className=\"shareImgItem\">\n          <img src={item.url} alt=\"Gallery Image\" className=\"shareImg\" />\n          {item.urls && (\n            <ImageList\n              sx={{ width: 500, height: 500 }}\n              variant=\"woven\"\n              cols={3}\n              gap={8}\n            >\n              {item.urls.map((url, index) => (\n                <ImageListItem key={index}>\n                  <img src={url} alt=\"Gallery Image\" className=\"shareImg\" />\n                </ImageListItem>\n              ))}\n            </ImageList>\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"shareVideoItem\">\n          <ReactPlayer\n            url={item.url}\n            className=\"shareVideo\"\n            width=\"640\"\n            height=\"360\"\n            controls\n            onClick={(event) => event.preventDefault()}\n          />\n        </div>\n      );\n    }\n  });\n\n  const SortableList = SortableContainer(({ items }) => {\n    return (\n      <div className=\"shareImgContainer\" ref={containerRef}>\n        {items.map((item, index) => (\n          <SortableItem\n            key={index}\n            item={item}\n            index={index}\n            containerRef={containerRef}\n          />\n        ))}\n      </div>\n    );\n  });\n\n  //Comment-------------------------------------------\n\n  const handleClickComment = (event, id) => {\n    setAnchorElComment(event.currentTarget);\n    const comment = comments.find((c) => c.id === id);\n    // console.log(comment)\n    setdataEdit(comment);\n    setCommentIdUser(comment.memberId);\n    setCommentIdToDelete(id);\n  };\n\n  const handleCloseComment = () => {\n    setAnchorElComment(null);\n  };\n\n  const handleEditComment = () => {\n    const comment = comments.find((c) => c.id === commentIdToDelete);\n    console.log(comment);\n    setdataEdit(comment);\n    setdataEditID(commentIdToDelete);\n    setTypeModal(\"Comment\");\n    setOpenModal(true);\n    handleCloseComment();\n  };\n\n  const handleDeleteComment = async () => {\n    console.log(`Delete Comment ${commentIdToDelete}`);\n    const requestBody = {\n      member_id: currentUser.member_id,\n    };\n\n    try {\n      const response = await axios.delete(\n        `/api/comments/${post.id}/comments/${commentIdToDelete}`,\n        { data: requestBody,\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n      const message = response.data.message;\n      // Handle the response message here\n      console.log(message);\n\n      // Fetch the updated comments after deleting the comment\n      const resComments = await axios.get(`/api/comments/${post.id}/Comments`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      setComments(resComments.data);\n\n      handleClose();\n      setLoadingComment(true);\n    } catch (err) {\n      console.log(err);\n    } finally {\n      setLoadingComment(false);\n      handleClose();\n    }\n  };\n\n  const submitComment = () => {\n    setTypeModal(\"Add Comment\");\n    setdataEdit(\"\");\n    setIsAddComment(true);\n    setOpenModal(true);\n  };\n\n  return (\n    <div className=\"post\" key={indexPost}>\n      <Card className=\"postWrapper\">\n        <CardHeader\n          avatar={\n            <Link to={`/profile/${post.firstName}`}>\n              <Avatar\n                aria-label=\"recipe\"\n                src={post?.profilePicture}\n                style={{ width: \"39px\", height: \"39px\" }}\n              ></Avatar>\n            </Link>\n          }\n          title={`${post?.firstName} ${post?.lastName}`}\n          subheader={formattedDate}\n          action={[\n            <IconButton key=\"more\" onClick={handleClick}>\n              <MoreHoriz fontSize=\"small\" />\n            </IconButton>,\n            <Menu\n              key=\"menu\"\n              anchorEl={anchorEl}\n              open={Boolean(anchorEl)}\n              onClose={handleClose}\n              keepMounted\n            >\n              {post?.firstName === user.firstName ? (\n                [\n                  <MenuItem key=\"edit\" onClick={handleEditPost}>\n                    <span>\n                      <EditIcon fontSize=\"small\" />\n                    </span>\n                    <span>Edit</span>\n                  </MenuItem>,\n                  <MenuItem key=\"delete\" onClick={handleDeletePost}>\n                    <span>\n                      <DeleteIcon fontSize=\"small\" />\n                    </span>\n                    <span>Delete</span>\n                  </MenuItem>,\n                ]\n              ) : (\n                <MenuItem key=\"report\" onClick={handleReportPost}>\n                  <span>\n                    <ReportIcon fontSize=\"small\" />\n                  </span>\n                  <span>Report Post</span>\n                </MenuItem>\n              )}\n            </Menu>,\n          ]}\n        />\n        <CardContent>\n          <Typography variant=\"body1\" className=\"postText\">\n            <span>{post?.content}</span>\n          </Typography>\n          <Typography variant=\"body2\" className=\"postText\">\n            {post?.tagpet.map((pet, i) => (\n              <span>\n                <Chip\n                  key={i}\n                  label={`#${pet}`}\n                  className=\"postChip\"\n                  style={{ color: \"#6200E8\" }}\n                />\n              </span>\n            ))}\n          </Typography>\n          <SortableList\n            items={post.img.map((item) => ({\n              type: item.endsWith(\".mp4\") ? \"video\" : \"image\",\n              url: item,\n            }))}\n            axis=\"xy\"\n          />\n        </CardContent>\n        <hr className=\"PostHr\" />\n        <div className=\"postBottom\">\n          <div className=\"postBottomLeft\">\n            <CardActions disableSpacing>\n              {isLiked ? (\n                <IconButton aria-label=\"add to favorites\" onClick={likeHandler}>\n                  <Favorite className=\"likeIcon\" style={{ color: \"#6200E8\" }} />\n                </IconButton>\n              ) : (\n                <IconButton aria-label=\"add to favorites\" onClick={likeHandler}>\n                  <FavoriteBorder\n                    className=\"likeIcon\"\n                    style={{ color: \"#6200E8\" }}\n                  />\n                </IconButton>\n              )}\n              <span className=\"postLikeCounter\">{like} people like it</span>\n            </CardActions>\n          </div>\n          <div className=\"postBottomRight\">\n            <CardActions disableSpacing>\n              <IconButton\n                aria-label=\"show more\"\n                sx={{ color: \"#6200E8\", right: 14 }}\n                onClick={() => setShowComments(!showComments)}\n              >\n                <Comment />\n                <p className=\"postCommentText\" underline=\"none\">\n                  <span>{comments.length} comments</span>\n                </p>\n              </IconButton>\n            </CardActions>\n          </div>\n        </div>\n        <Collapse in={showComments} timeout=\"auto\" unmountOnExit>\n          <hr className=\"PostHr\" />\n          {loadingComment ? (\n            <div className=\"loadingWrapper\">\n              <ReactLoading\n                type=\"spin\"\n                color=\"#6200E8\"\n                height={\"10%\"}\n                width={\"10%\"}\n              />\n            </div>\n          ) : (\n            <CardContent>\n              <Typography paragraph>Comments</Typography>\n              {comments\n                .slice(\n                  0,\n                  showAllComments ? comments.length : maxDisplayedComments\n                )\n                .map((comment, index) => {\n                  return (\n                    <div key={index} className=\"postComment\">\n                      <div className=\"postCommentProfile\">\n                        <CardHeader\n                          avatar={\n                            <Avatar\n                              aria-label=\"recipe\"\n                              src={comment?.profilePicture}\n                              sx={{ width: \"39px\", height: \"39px\" }}\n                            />\n                          }\n                          title={`${comment?.firstName} ${comment?.lastName}`}\n                          subheader={`${comment.content}`}\n                          action={\n                            <>\n                              <IconButton\n                                onClick={(event) =>\n                                  handleClickComment(event, comment.id)\n                                }\n                              >\n                                <MoreHoriz fontSize=\"small\" />\n                              </IconButton>\n                            </>\n                          }\n                        />\n                        <Menu\n                          anchorEl={anchorElComment || undefined} // Provide undefined if anchorElComment is null\n                          open={Boolean(anchorElComment)}\n                          onClose={handleCloseComment}\n                        >\n                          {user.member_id === commentIdUser ? (\n                            [\n                              <MenuItem key=\"edit\" onClick={handleEditComment}>\n                                <span>\n                                  <EditIcon fontSize=\"small\" />\n                                </span>\n                                <span>Edit</span>\n                              </MenuItem>,\n                              <MenuItem\n                                key=\"delete\"\n                                onClick={handleDeleteComment}\n                              >\n                                <span>\n                                  <DeleteIcon fontSize=\"small\" />\n                                </span>\n                                <span>Delete</span>\n                              </MenuItem>,\n                            ]\n                          ) : (\n                            <MenuItem key=\"report\" onClick={handleReportUser}>\n                              <span>\n                                <ReportIcon fontSize=\"small\" />\n                              </span>\n                              <span>Report User</span>\n                            </MenuItem>\n                          )}\n                        </Menu>\n                      </div>\n                    </div>\n                  );\n                })}\n              {comments.length > maxDisplayedComments && (\n                <Typography\n                  className=\"showMoreComments\"\n                  variant=\"body2\"\n                  color=\"primary\"\n                  onClick={() => setShowAllComments(!showAllComments)}\n                >\n                  {showAllComments ? \"Hide\" : \"Show More\"} Comments\n                </Typography>\n              )}\n              <Button variant=\"contained\" onClick={() => submitComment()}>\n                Comment\n              </Button>\n            </CardContent>\n          )}\n        </Collapse>\n      </Card>\n      {openModal && (\n        <NestedModal\n          key={indexPost}\n          onClose={() => setOpenModal(false)}\n          onContent={dataEdit}\n          onTitle={typeModal}\n          userId={currentUser?.member_id}\n          onContentID={post?.id}\n          onCommentsID={dataEditID}\n          onLoading={true}\n          isAddComment={isAddComment}\n          onPostUpdate={(updatedComment) =>\n            handlePostUpdate(updatedComment, typeModal)\n          }\n        />\n      )}\n      {openReportModal && (\n        <ReportModal\n          key={indexPost}\n          onClose={() => setOpenReportModal(false)}\n          onContent={dataEdit}\n          onTitle={typeModal}\n          userId={currentUser?.member_id}\n          onContentID={post?.id}\n          onCommentsID={dataEditID}\n          onLoading={true}\n          onPostUpdate={handlePostUpdate}\n        />\n      )}\n    </div>\n  );\n}\n","/Users/watthananick/pet-story-project/client/src/components/online/Online.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/components/closeFriend/CloseFriend.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/components/share/Share.jsx",["158","159","160","161","162","163"],[],"import \"./share.css\";\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/storage\";\nimport React, { useContext, useRef, useState, useEffect } from \"react\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport axios from \"axios\";\nimport io from \"socket.io-client\";\nimport Cookies from \"js-cookie\";\n\nimport {\n  Avatar,\n  Chip,\n  Autocomplete,\n  TextField,\n  Grid,\n  IconButton,\n  FormControl,\n  InputLabel,\n} from \"@mui/material\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport {\n  PermMedia,\n  Cancel,\n  Send as SendIcon,\n  PhotoCameraBack as PhotoCameraBackIcon,\n} from \"@mui/icons-material\";\nimport { SortableContainer, SortableElement } from \"react-sortable-hoc\";\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n};\n\nfirebase.initializeApp(firebaseConfig);\nconst storage = firebase.storage();\n\nexport default function Share({ onNewPost }) {\n  const { user } = useContext(AuthContext);\n  const desc = useRef();\n  const [typePets, setTypePets] = useState([]);\n  const [selectedTags, setSelectedTags] = useState([]);\n  const [files, setFiles] = useState([]);\n  const [typeData, setTypeData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [privacy, setPrivacy] = useState(\"normal\");\n  const MAX_TAGS_LIMIT = 3;\n  const token = Cookies.get(\"token\");\n\n  const privacyOptions = [\n    { label: \"สาธารณะ\", value: \"normal\" },\n    { label: \"ส่วนตัว\", value: \"private\" },\n    { label: \"เฉพาะผู้ติดตาม\", value: \"followers\" },\n  ];\n\n  const onSortEnd = ({ oldIndex, newIndex }) => {\n    setFiles(arrayMove(files, oldIndex, newIndex));\n  };\n\n  const handlePrivacyChange = (event, value) => {\n    if (value) {\n      setPrivacy(value.value);\n    } else {\n      setPrivacy(\"normal\"); // Default to normal if no option is selected\n    }\n  };\n\n  const handleFileChange = (e) => {\n    const selectedFiles = Array.from(e.target.files).slice(0, 6); // Limit to 6 files\n\n    // File size limits\n    const imageMaxSize = 5 * 1024 * 1024; // 5 MB in bytes\n    const videoMaxSize = 100 * 1024 * 1024; // 100 MB in bytes\n\n    // Validate file sizes\n    const validFiles = selectedFiles.filter((file) => {\n      if (file.type.startsWith(\"image/\") && file.size <= imageMaxSize) {\n        return true; // Valid image file\n      }\n      if (file.type.startsWith(\"video/\") && file.size <= videoMaxSize) {\n        return true; // Valid video file\n      }\n      return false; // Invalid file\n    });\n\n    setFiles(validFiles);\n  };\n\n  const removeFile = (index) => {\n    const updatedFiles = [...files];\n    updatedFiles.splice(index, 1);\n    setFiles(updatedFiles);\n  };\n\n  const submitHandler = async (e) => {\n    e.preventDefault();\n\n    setLoading(true);\n\n    const storageRef = storage.ref();\n    const filePromises = files.map((file) => {\n      const fileName = Date.now() + file.name;\n      const fileRef = storageRef.child(`${user.member_id}/${fileName}`);\n      return fileRef.put(file);\n    });\n\n    const socket = io.connect(process.env.PATH_ID); // Fix the environment variable name\n\n    try {\n      const uploadSnapshots = await Promise.all(filePromises);\n\n      const fileUrls = await Promise.all(\n        uploadSnapshots.map((snapshot) => snapshot.ref.getDownloadURL())\n      );\n\n      const newPost = {\n        title: typeData,\n        content: desc.current.value,\n        member_id: user.member_id,\n        likes: [],\n        tagpet: selectedTags.map((tag) => tag.nameType),\n        img: fileUrls,\n        comment: [],\n        status: privacy,\n      };\n\n      const res = await axios.post(`/api/posts`, newPost, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      setFiles([]);\n      setTypeData(null);\n      setSelectedTags([]);\n      desc.current.value = \"\";\n      socket.emit(\"newPost\", res.data); // Emit the \"newPost\" event with data\n      if (onNewPost) {\n        onNewPost();\n      }\n    } catch (err) {\n      console.log(err);\n      // Handle error here and display appropriate message to the user\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    const getTypePets = async () => {\n      try {\n        const res = await axios.get(\"/api/typePets\");\n        const data = res.data;\n        const typePets = data.map((item, index) => ({\n          id: index,\n          nameType: item.nameType,\n        }));\n        setTypePets(typePets);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    getTypePets();\n  }, []);\n\n  const SortableItem = SortableElement(({ item, index }) => {\n    if (item.type === \"image\") {\n      setTypeData(\"image\");\n      return (\n        <div className=\"shareImgItem\">\n          <img src={item.url} alt=\"Gallery Image\" className=\"shareImg\" />\n          <Cancel\n            className=\"shareCancelImg\"\n            onClick={() => removeFile(index)}\n          />\n        </div>\n      );\n    } else if (item.type === \"video\") {\n      setTypeData(\"video\");\n      return (\n        <div className=\"shareVideoItem\">\n          <video src={item.url} className=\"shareVideo\" controls />\n          <Cancel\n            className=\"shareCancelImg\"\n            onClick={() => removeFile(index)}\n          />\n        </div>\n      );\n    } else {\n      return null; // Exclude unsupported file types\n    }\n  });\n\n  const SortableList = SortableContainer(({ items }) => (\n    <div className=\"shareImgContainer\">\n      {items.map((item, index) => (\n        <div key={index}>\n          {\" \"}\n          {/* Assign a unique key to each child element */}\n          <SortableItem item={item} index={index} />\n        </div>\n      ))}\n    </div>\n  ));\n\n  function arrayMove(array, oldIndex, newIndex) {\n    if (newIndex >= array.length) {\n      let k = newIndex - array.length + 1;\n      while (k--) {\n        array.push(undefined);\n      }\n    }\n    array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n    return array;\n  }\n\n  return (\n    <div className=\"share\">\n      <div className=\"shareWrapper\">\n        <div className=\"shareTop\">\n          <Grid container alignItems=\"center\">\n            <Grid item xs={6} sm={6} md={3}>\n              <Avatar\n                aria-label=\"recipe\"\n                src={user.profilePicture}\n                sx={{ width: \"39px\", height: \"39px\", mr: 1 }}\n              />\n              <Autocomplete\n                id=\"margin-none\"\n                autoFocus\n                disableCloseOnSelect\n                fullWidth\n                selectOnFocus\n                autoHighlight\n                options={privacyOptions}\n                defaultValue={privacyOptions[0]}\n                getOptionLabel={(option) => option.label}\n                onChange={handlePrivacyChange}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    variant=\"standard\"\n                    size=\"small\"\n                    sx={{ color: \"#6309DE\", m: 1 }}\n                  />\n                )}\n              />\n            </Grid>\n            <Grid item xs={12} sm={12} md={12}>\n              <TextField\n                fullWidth\n                placeholder={`What's on your mind, ${user.firstName}?`}\n                className=\"shareInput\"\n                variant=\"standard\"\n                size=\"small\"\n                rows={3}\n                multiline\n                inputRef={desc}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} md={12}>\n              <form className=\"shareBottom\" onSubmit={submitHandler}>\n                {/* Share options */}\n                <div className=\"shareOptions\">\n                  <div className=\"shareOption\">\n                    <label htmlFor=\"file\" className=\"shareOptionLabel\">\n                      <PhotoCameraBackIcon />\n                      {/* <PermMedia htmlColor=\"tomato\" className=\"shareIcon\" /> */}\n                      <span className=\"shareOptionText\">Photo or Video</span>\n                      <input\n                        style={{ display: \"none\" }}\n                        type=\"file\"\n                        id=\"file\"\n                        accept=\".png,.jpeg,.jpg,.gif,.mp4,.mov\"\n                        multiple\n                        onChange={handleFileChange}\n                      />\n                    </label>\n                  </div>\n                </div>\n                {/* Share images */}\n                <div className=\"shareImg\">\n                  <SortableList\n                    items={files.map((file, index) => ({\n                      type: file.type.startsWith(\"image/\") ? \"image\" : \"video\",\n                      url: URL.createObjectURL(file),\n                    }))}\n                    onSortEnd={onSortEnd}\n                    axis=\"xy\"\n                    distance={1}\n                  />\n                </div>\n                {/* Share tags */}\n                <div className=\"shareTags\">\n                  <Autocomplete\n                    multiple\n                    sx={{ m: 1 }}\n                    id=\"type-pets-select\"\n                    options={typePets}\n                    // defaultValue={typePets[0]}\n                    getOptionLabel={(option) => option.nameType}\n                    onChange={(event, value) => setSelectedTags(value)}\n                    value={selectedTags}\n                    limitTags={MAX_TAGS_LIMIT} // Set the limit for the number of tags\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        label=\"Type Pets\"\n                        variant=\"outlined\"\n                        size=\"small\"\n                      />\n                    )}\n                  />\n                </div>\n                {/* Share button */}\n                <div className=\"shareBottomOptions\">\n                  <LoadingButton\n                    type=\"submit\"\n                    variant=\"contained\"\n                    sx={{ backgroundColor: \"#6309DE\" }}\n                    startIcon={<SendIcon />}\n                    className=\"shareButton\"\n                    disabled={loading}\n                    loading={loading}\n                  >\n                    Share\n                  </LoadingButton>\n                </div>\n              </form>\n            </Grid>\n          </Grid>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/watthananick/pet-story-project/client/src/components/modelEdit/ModalEdit.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/components/search/Search.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/components/dialogModel/dialogModel.jsx",["164","165","166","167","168","169","170","171","172","173","174","175","176"],[],"/Users/watthananick/pet-story-project/client/src/components/dialogModel/dialogModelCover.jsx",["177","178","179","180","181","182","183","184","185","186","187","188"],[],"import { useState, useRef } from \"react\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Slider,\n  Stack,\n  Grid,\n  Typography,\n  IconButton,\n} from \"@mui/material\";\nimport axios from \"axios\";\nimport Cookies from \"js-cookie\";\nimport AddAPhotoIcon from \"@mui/icons-material/AddAPhoto\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport ReactCrop from \"react-image-crop\";\nimport \"react-image-crop/dist/ReactCrop.css\";\nimport { SortableContainer, SortableElement } from \"react-sortable-hoc\";\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/storage\";\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n};\n\nfirebase.initializeApp(firebaseConfig);\nconst storage = firebase.storage();\n\nexport default function FilePreviewerCover({ onClose }) {\n  const [imagePreview, setImagePreview] = useState(null);\n  const [videoPreview, setVideoPreview] = useState(null);\n  const token = Cookies.get(\"token\");\n  const [open, setOpen] = useState(true);\n  const [user, setUser] = useState({});\n  const filePicekerRef = useRef(null);\n  const [crop, setCrop] = useState({\n    unit: \"%\",\n    width: 30,\n    aspect: 1 / 1,\n    rotation: 0,\n    x: 0,\n    y: 0,\n  });\n  const handleClose = () => {\n    onClose();\n  };\n\n  const handleCancel = () => {\n    setImagePreview(null);\n    setImagePreview(null);\n  };\n  function previewFile(e) {\n    // Reading New File (open file Picker Box)\n    const reader = new FileReader();\n    // Gettting Selected File (user can select multiple but we are choosing only one)\n    const selectedFile = e.target.files[0];\n    if (selectedFile) {\n      reader.readAsDataURL(selectedFile);\n    }\n    // As the File loaded then set the stage as per the file type\n    reader.onload = (readerEvent) => {\n      if (selectedFile.type.includes(\"image\")) {\n        setImagePreview(readerEvent.target.result);\n      } else if (selectedFile.type.includes(\"video\")) {\n        setVideoPreview(readerEvent.target.result);\n      }\n    };\n  }\n\n  const getCroppedImageBlob = async (sourceImage, crop, fileName) => {\n    return new Promise((resolve) => {\n      const image = new Image();\n      const reader = new FileReader();\n\n      reader.onloadend = () => {\n        image.src = reader.result;\n        image.onload = () => {\n          const canvas = document.createElement(\"canvas\");\n          const scaleX = image.naturalWidth / image.width;\n          const scaleY = image.naturalHeight / image.height;\n          const rotation = crop.rotation || 0;\n\n          const rotatedWidth =\n            crop.width * Math.abs(Math.cos((rotation * Math.PI) / 180)) +\n            crop.height * Math.abs(Math.sin((rotation * Math.PI) / 180));\n          const rotatedHeight =\n            crop.width * Math.abs(Math.sin((rotation * Math.PI) / 180)) +\n            crop.height * Math.abs(Math.cos((rotation * Math.PI) / 180));\n\n          canvas.width = rotatedWidth;\n          canvas.height = rotatedHeight;\n          const ctx = canvas.getContext(\"2d\");\n\n          ctx.translate(rotatedWidth / 2, rotatedHeight / 2);\n          ctx.rotate((rotation * Math.PI) / 180);\n          ctx.drawImage(\n            image,\n            (crop.x + crop.width / 2) * scaleX - rotatedWidth / 2,\n            (crop.y + crop.height / 2) * scaleY - rotatedHeight / 2,\n            crop.width * scaleX,\n            crop.height * scaleY,\n            -crop.width / 2,\n            -crop.height / 2,\n            crop.width,\n            crop.height\n          );\n\n          canvas.toBlob((blob) => {\n            if (!blob) {\n              resolve(null);\n              return;\n            }\n            blob.name = fileName;\n            resolve(blob);\n          }, \"image/jpeg\");\n        };\n      };\n\n      reader.readAsDataURL(sourceImage);\n    });\n  };\n\n  const handleAvatarUpload = async () => {\n    if (crop.width && crop.height) {\n      const croppedImageBlob = await getCroppedImageBlob(\n        filePicekerRef.current.files[0],\n        crop,\n        \"newFile.jpeg\"\n      );\n      const formData = new FormData();\n      formData.append(\"avatar\", croppedImageBlob);\n      try {\n        const res = await axios.post(\"/api/users/upload-avatar\", formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\",\n            Authorization: `Bearer ${token}`,\n          },\n        });\n        setUser((prevUser) => ({\n          ...prevUser,\n          profilePicture: res.data.profilePicture,\n        }));\n        onClose();\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <Dialog open={open} onClose={handleClose}>\n        <DialogTitle>Update Cover Picture</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2}>\n            <Grid item xs={6} sm={6} md={6}>\n              <div className=\"btn-container\">\n                <input\n                  ref={filePicekerRef}\n                  accept=\"image/*, video/*\"\n                  onChange={previewFile}\n                  type=\"file\"\n                  hidden\n                />\n                <Button\n                  variant=\"outlined\"\n                  className=\"btn\"\n                  startIcon={<AddAPhotoIcon />}\n                  onClick={() => filePicekerRef.current.click()}\n                >\n                  <span>Choose</span>\n                </Button>\n              </div>\n            </Grid>\n            <Grid item xs={6} sm={6} md={6}>\n              <IconButton aria-label=\"Picture\" onClick={handleCancel}>\n                <CloseIcon />\n              </IconButton>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <div className=\"preview\">\n                {imagePreview && <img src={imagePreview} alt=\"Image Preview\" />}\n              </div>\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button onClick={handleAvatarUpload}>Submit</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n",{"ruleId":"189","severity":1,"message":"190","line":47,"column":6,"nodeType":"191","endLine":47,"endColumn":17,"suggestions":"192"},{"ruleId":"193","severity":1,"message":"194","line":1,"column":20,"nodeType":"195","messageId":"196","endLine":1,"endColumn":26},{"ruleId":"193","severity":1,"message":"197","line":11,"column":8,"nodeType":"195","messageId":"196","endLine":11,"endColumn":24},{"ruleId":"193","severity":1,"message":"198","line":20,"column":8,"nodeType":"195","messageId":"196","endLine":20,"endColumn":12},{"ruleId":"193","severity":1,"message":"199","line":46,"column":10,"nodeType":"195","messageId":"196","endLine":46,"endColumn":22},{"ruleId":"193","severity":1,"message":"200","line":46,"column":24,"nodeType":"195","messageId":"196","endLine":46,"endColumn":39},{"ruleId":"193","severity":1,"message":"201","line":52,"column":9,"nodeType":"195","messageId":"196","endLine":52,"endColumn":32},{"ruleId":"193","severity":1,"message":"202","line":104,"column":9,"nodeType":"195","messageId":"196","endLine":104,"endColumn":26},{"ruleId":"193","severity":1,"message":"203","line":108,"column":9,"nodeType":"195","messageId":"196","endLine":108,"endColumn":29},{"ruleId":"193","severity":1,"message":"204","line":15,"column":8,"nodeType":"195","messageId":"196","endLine":15,"endColumn":15},{"ruleId":"189","severity":1,"message":"190","line":96,"column":6,"nodeType":"191","endLine":96,"endColumn":44,"suggestions":"205"},{"ruleId":"193","severity":1,"message":"206","line":4,"column":3,"nodeType":"195","messageId":"196","endLine":4,"endColumn":9},{"ruleId":"193","severity":1,"message":"207","line":14,"column":8,"nodeType":"195","messageId":"196","endLine":14,"endColumn":20},{"ruleId":"193","severity":1,"message":"208","line":22,"column":3,"nodeType":"195","messageId":"196","endLine":22,"endColumn":10},{"ruleId":"193","severity":1,"message":"209","line":24,"column":3,"nodeType":"195","messageId":"196","endLine":24,"endColumn":7},{"ruleId":"193","severity":1,"message":"210","line":26,"column":3,"nodeType":"195","messageId":"196","endLine":26,"endColumn":19},{"ruleId":"193","severity":1,"message":"211","line":27,"column":3,"nodeType":"195","messageId":"196","endLine":27,"endColumn":7},{"ruleId":"193","severity":1,"message":"212","line":28,"column":3,"nodeType":"195","messageId":"196","endLine":28,"endColumn":11},{"ruleId":"193","severity":1,"message":"213","line":29,"column":3,"nodeType":"195","messageId":"196","endLine":29,"endColumn":15},{"ruleId":"193","severity":1,"message":"214","line":30,"column":3,"nodeType":"195","messageId":"196","endLine":30,"endColumn":17},{"ruleId":"193","severity":1,"message":"215","line":40,"column":10,"nodeType":"195","messageId":"196","endLine":40,"endColumn":24},{"ruleId":"189","severity":1,"message":"190","line":40,"column":6,"nodeType":"191","endLine":40,"endColumn":12,"suggestions":"216"},{"ruleId":"193","severity":1,"message":"217","line":9,"column":10,"nodeType":"195","messageId":"196","endLine":9,"endColumn":26},{"ruleId":"193","severity":1,"message":"218","line":9,"column":28,"nodeType":"195","messageId":"196","endLine":9,"endColumn":40},{"ruleId":"193","severity":1,"message":"219","line":9,"column":42,"nodeType":"195","messageId":"196","endLine":9,"endColumn":55},{"ruleId":"193","severity":1,"message":"220","line":23,"column":3,"nodeType":"195","messageId":"196","endLine":23,"endColumn":12},{"ruleId":"193","severity":1,"message":"221","line":33,"column":3,"nodeType":"195","messageId":"196","endLine":33,"endColumn":11},{"ruleId":"189","severity":1,"message":"222","line":137,"column":6,"nodeType":"191","endLine":137,"endColumn":45,"suggestions":"223"},{"ruleId":"189","severity":1,"message":"224","line":175,"column":6,"nodeType":"191","endLine":175,"endColumn":27,"suggestions":"225"},{"ruleId":"226","severity":1,"message":"227","line":270,"column":11,"nodeType":"228","endLine":270,"endColumn":74},{"ruleId":"226","severity":1,"message":"227","line":280,"column":19,"nodeType":"228","endLine":280,"endColumn":77},{"ruleId":"193","severity":1,"message":"209","line":12,"column":3,"nodeType":"195","messageId":"196","endLine":12,"endColumn":7},{"ruleId":"193","severity":1,"message":"229","line":16,"column":3,"nodeType":"195","messageId":"196","endLine":16,"endColumn":13},{"ruleId":"193","severity":1,"message":"230","line":17,"column":3,"nodeType":"195","messageId":"196","endLine":17,"endColumn":14},{"ruleId":"193","severity":1,"message":"231","line":18,"column":3,"nodeType":"195","messageId":"196","endLine":18,"endColumn":13},{"ruleId":"193","severity":1,"message":"232","line":22,"column":3,"nodeType":"195","messageId":"196","endLine":22,"endColumn":12},{"ruleId":"226","severity":1,"message":"227","line":174,"column":11,"nodeType":"228","endLine":174,"endColumn":74},{"ruleId":"193","severity":1,"message":"233","line":8,"column":3,"nodeType":"195","messageId":"196","endLine":8,"endColumn":9},{"ruleId":"193","severity":1,"message":"234","line":10,"column":3,"nodeType":"195","messageId":"196","endLine":10,"endColumn":7},{"ruleId":"193","severity":1,"message":"235","line":11,"column":3,"nodeType":"195","messageId":"196","endLine":11,"endColumn":13},{"ruleId":"193","severity":1,"message":"229","line":12,"column":3,"nodeType":"195","messageId":"196","endLine":12,"endColumn":13},{"ruleId":"193","severity":1,"message":"236","line":14,"column":10,"nodeType":"195","messageId":"196","endLine":14,"endColumn":19},{"ruleId":"193","severity":1,"message":"237","line":16,"column":8,"nodeType":"195","messageId":"196","endLine":16,"endColumn":13},{"ruleId":"193","severity":1,"message":"238","line":19,"column":8,"nodeType":"195","messageId":"196","endLine":19,"endColumn":17},{"ruleId":"193","severity":1,"message":"239","line":20,"column":10,"nodeType":"195","messageId":"196","endLine":20,"endColumn":16},{"ruleId":"193","severity":1,"message":"240","line":42,"column":9,"nodeType":"195","messageId":"196","endLine":42,"endColumn":14},{"ruleId":"193","severity":1,"message":"241","line":43,"column":16,"nodeType":"195","messageId":"196","endLine":43,"endColumn":23},{"ruleId":"193","severity":1,"message":"242","line":45,"column":10,"nodeType":"195","messageId":"196","endLine":45,"endColumn":17},{"ruleId":"193","severity":1,"message":"243","line":51,"column":9,"nodeType":"195","messageId":"196","endLine":51,"endColumn":21},{"ruleId":"193","severity":1,"message":"244","line":99,"column":15,"nodeType":"195","messageId":"196","endLine":99,"endColumn":26},{"ruleId":"193","severity":1,"message":"233","line":8,"column":3,"nodeType":"195","messageId":"196","endLine":8,"endColumn":9},{"ruleId":"193","severity":1,"message":"245","line":9,"column":3,"nodeType":"195","messageId":"196","endLine":9,"endColumn":8},{"ruleId":"193","severity":1,"message":"235","line":11,"column":3,"nodeType":"195","messageId":"196","endLine":11,"endColumn":13},{"ruleId":"193","severity":1,"message":"236","line":18,"column":8,"nodeType":"195","messageId":"196","endLine":18,"endColumn":17},{"ruleId":"193","severity":1,"message":"246","line":20,"column":10,"nodeType":"195","messageId":"196","endLine":20,"endColumn":27},{"ruleId":"193","severity":1,"message":"247","line":20,"column":29,"nodeType":"195","messageId":"196","endLine":20,"endColumn":44},{"ruleId":"193","severity":1,"message":"248","line":35,"column":7,"nodeType":"195","messageId":"196","endLine":35,"endColumn":14},{"ruleId":"193","severity":1,"message":"249","line":39,"column":10,"nodeType":"195","messageId":"196","endLine":39,"endColumn":22},{"ruleId":"193","severity":1,"message":"241","line":41,"column":16,"nodeType":"195","messageId":"196","endLine":41,"endColumn":23},{"ruleId":"193","severity":1,"message":"250","line":42,"column":10,"nodeType":"195","messageId":"196","endLine":42,"endColumn":14},{"ruleId":"193","severity":1,"message":"251","line":44,"column":16,"nodeType":"195","messageId":"196","endLine":44,"endColumn":23},{"ruleId":"226","severity":1,"message":"227","line":190,"column":34,"nodeType":"228","endLine":190,"endColumn":80},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.","ArrayExpression",["252"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'LockOutlinedIcon' is defined but never used.","'Card' is defined but never used.","'showPassword' is assigned a value but never used.","'setShowPassword' is assigned a value but never used.","'handleClickShowPassword' is assigned a value but never used.","'handleEmailChange' is assigned a value but never used.","'handlePasswordChange' is assigned a value but never used.","'Cookies' is defined but never used.",["253"],"'Person' is defined but never used.","'ReactLoading' is defined but never used.","'Divider' is defined but never used.","'Chip' is defined but never used.","'CircularProgress' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'InputAdornment' is defined but never used.","'searchResponse' is assigned a value but never used.",["254"],"'FacebookProvider' is defined but never used.","'EmbeddedPost' is defined but never used.","'EmbeddedVideo' is defined but never used.","'TextField' is defined but never used.","'MoreVert' is defined but never used.","React Hook useEffect has missing dependencies: 'handlePostUpdate', 'onPostUpdate', and 'token'. Either include them or remove the dependency array.",["255"],"React Hook useEffect has a missing dependency: 'currentUser.member_id'. Either include it or remove the dependency array.",["256"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'IconButton' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'PermMedia' is defined but never used.","'Slider' is defined but never used.","'Grid' is defined but never used.","'Typography' is defined but never used.","'ReactCrop' is defined but never used.","'axios' is defined but never used.","'CloseIcon' is defined but never used.","'styled' is defined but never used.","'token' is assigned a value but never used.","'setOpen' is assigned a value but never used.","'loading' is assigned a value but never used.","'handleCancel' is assigned a value but never used.","'downloadUrl' is assigned a value but never used.","'Stack' is defined but never used.","'SortableContainer' is defined but never used.","'SortableElement' is defined but never used.","'storage' is assigned a value but never used.","'videoPreview' is assigned a value but never used.","'user' is assigned a value but never used.","'setCrop' is assigned a value but never used.",{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},"Update the dependencies array to be: [firstName, token]",{"range":"267","text":"268"},"Update the dependencies array to be: [onProfile, firstName, user.member_id, token]",{"range":"269","text":"270"},"Update the dependencies array to be: [token, user]",{"range":"271","text":"272"},"Update the dependencies array to be: [post.member_id, post.id, showComments, handlePostUpdate, onPostUpdate, token]",{"range":"273","text":"274"},"Update the dependencies array to be: [currentUser.member_id, post.id, post.likes]",{"range":"275","text":"276"},[1707,1718],"[firstName, token]",[2895,2933],"[onProfile, firstName, user.member_id, token]",[1192,1198],"[token, user]",[4376,4415],"[post.member_id, post.id, showComments, handlePostUpdate, onPostUpdate, token]",[5566,5587],"[currentUser.member_id, post.id, post.likes]"]