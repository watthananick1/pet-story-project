[{"/Users/watthananick/pet-story-project/client/src/index.js":"1","/Users/watthananick/pet-story-project/client/src/App.js":"2","/Users/watthananick/pet-story-project/client/src/context/AuthContext.js":"3","/Users/watthananick/pet-story-project/client/src/context/AuthReducer.js":"4","/Users/watthananick/pet-story-project/client/src/pages/login/Login.jsx":"5","/Users/watthananick/pet-story-project/client/src/pages/profile/Profile.jsx":"6","/Users/watthananick/pet-story-project/client/src/pages/typepet/TypePet.jsx":"7","/Users/watthananick/pet-story-project/client/src/pages/home/Home.jsx":"8","/Users/watthananick/pet-story-project/client/src/pages/register/Register.jsx":"9","/Users/watthananick/pet-story-project/client/src/apiCalls.js":"10","/Users/watthananick/pet-story-project/client/src/components/sidebar/Sidebar.jsx":"11","/Users/watthananick/pet-story-project/client/src/components/feed/Feed.jsx":"12","/Users/watthananick/pet-story-project/client/src/components/topbar/Topbar.jsx":"13","/Users/watthananick/pet-story-project/client/src/components/rightbar/Rightbar.jsx":"14","/Users/watthananick/pet-story-project/client/src/dummyData.js":"15","/Users/watthananick/pet-story-project/client/src/components/post/Post.jsx":"16","/Users/watthananick/pet-story-project/client/src/components/online/Online.jsx":"17","/Users/watthananick/pet-story-project/client/src/components/closeFriend/CloseFriend.jsx":"18","/Users/watthananick/pet-story-project/client/src/components/share/Share.jsx":"19","/Users/watthananick/pet-story-project/client/src/components/modelEdit/ModalEdit.jsx":"20","/Users/watthananick/pet-story-project/client/src/components/search/Search.jsx":"21"},{"size":313,"mtime":1617783295000,"results":"22","hashOfConfig":"23"},{"size":1060,"mtime":1684768149987,"results":"24","hashOfConfig":"23"},{"size":1080,"mtime":1684936330557,"results":"25","hashOfConfig":"23"},{"size":913,"mtime":1617783295000,"results":"26","hashOfConfig":"23"},{"size":3153,"mtime":1684936311264,"results":"27","hashOfConfig":"23"},{"size":2207,"mtime":1685249706848,"results":"28","hashOfConfig":"23"},{"size":2727,"mtime":1684938332250,"results":"29","hashOfConfig":"23"},{"size":426,"mtime":1617783295000,"results":"30","hashOfConfig":"23"},{"size":3340,"mtime":1684940287387,"results":"31","hashOfConfig":"23"},{"size":918,"mtime":1685109134142,"results":"32","hashOfConfig":"23"},{"size":2293,"mtime":1684974801754,"results":"33","hashOfConfig":"23"},{"size":2335,"mtime":1685108946952,"results":"34","hashOfConfig":"23"},{"size":7950,"mtime":1685490283571,"results":"35","hashOfConfig":"23"},{"size":4436,"mtime":1685249484508,"results":"36","hashOfConfig":"23"},{"size":2525,"mtime":1684483667982,"results":"37","hashOfConfig":"23"},{"size":15218,"mtime":1685109515146,"results":"38","hashOfConfig":"23"},{"size":669,"mtime":1684747399781,"results":"39","hashOfConfig":"23"},{"size":468,"mtime":1684767554320,"results":"40","hashOfConfig":"23"},{"size":8272,"mtime":1685216797167,"results":"41","hashOfConfig":"23"},{"size":3100,"mtime":1685105968522,"results":"42","hashOfConfig":"23"},{"size":1452,"mtime":1685388141803,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"ldi8gy",{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"47"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"47"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/watthananick/pet-story-project/client/src/index.js",[],[],[],"/Users/watthananick/pet-story-project/client/src/App.js",[],[],"/Users/watthananick/pet-story-project/client/src/context/AuthContext.js",[],[],"/Users/watthananick/pet-story-project/client/src/context/AuthReducer.js",[],[],"/Users/watthananick/pet-story-project/client/src/pages/login/Login.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/pages/profile/Profile.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/pages/typepet/TypePet.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/pages/home/Home.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/pages/register/Register.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/apiCalls.js",[],[],"/Users/watthananick/pet-story-project/client/src/components/sidebar/Sidebar.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/components/feed/Feed.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/components/topbar/Topbar.jsx",["110","111","112","113","114","115","116","117","118"],[],"/Users/watthananick/pet-story-project/client/src/components/rightbar/Rightbar.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/dummyData.js",[],[],"/Users/watthananick/pet-story-project/client/src/components/post/Post.jsx",["119","120","121","122","123","124","125"],[],"import \"./post.css\";\nimport { useState, useEffect, useContext, useRef } from \"react\";\nimport axios from \"axios\";\nimport { format } from \"timeago.js\";\nimport { Link } from \"react-router-dom\";\nimport NestedModal from \"../modelEdit/ModalEdit\";\n\n\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardActions,\n  Collapse,\n  Typography,\n  IconButton,\n  Avatar,\n  TextField,\n  Button,\n  Chip,\n  Menu, \n  MenuItem,\n} from \"@mui/material\";\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport { MoreVert, FavoriteBorder, Favorite, Comment} from \"@mui/icons-material\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport { SortableContainer, SortableElement } from \"react-sortable-hoc\";\n// import ReactPlayer from 'react-player';\nimport ReactPlayer from 'react-player/lazy';\nimport ReactLoading from 'react-loading';\n\nexport default function Post({ post, onPostUpdate }) {\n  const { user } = useContext(AuthContext);\n  const [editing, setEditing] = useState(false);\n  const [updatedContent, setUpdatedContent] = useState(post.content);\n  const [loading, setLoading] = useState(false);\n  const [like, setLike] = useState(post.likes.length);\n  const [isLiked, setIsLiked] = useState(false);\n  const [comments, setComments] = useState([]);\n  const [commentsData, setCommentsData] = useState([]);\n  const [showAllComments, setShowAllComments] = useState(false);\n  const [newCommentText, setNewCommentText] = useState(\"\");\n  const [showComments, setShowComments] = useState(false);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [anchorElComment, setAnchorElComment] = useState(null);\n  const [commentIdToDelete, setCommentIdToDelete] = useState(null);\n  const [loadingComment, setLoadingComment] = useState(false);\n  const maxDisplayedComments = 3;\n  const { user: currentUser } = useContext(AuthContext);\n  const [openModal, setOpenModal] = useState(false);\n  const [typeModal, setTypeModal] = useState(\"Post\");\n  const containerRef = useRef(null);\n  const [dataEdit, setdataEdit] = useState([]);\n  const [dataEditID, setdataEditID] = useState(null);\n\n  const createdAt = new Date(post.createdAt.seconds * 1000);\n  const formattedDate = format(createdAt);\n\n  //++++++++++++++++++ fetch Data +++++++++++++++++++\n  useEffect(() => {\n    setIsLiked(post.likes.includes(currentUser.member_id));\n  }, [currentUser.member_id, post.likes]);\n\n  useEffect(() => {\n    const source = axios.CancelToken.source();\n\n    const fetchComments = async () => {\n      try {\n        const resComments = await axios.get(`/api/comments/${post.id}/comments`);\n        setComments(resComments.data);\n        setLoadingComment(true);\n      } catch (err) {\n        console.log(err);\n      } finally {\n        setLoadingComment(false);\n      }\n    };\n    \n    fetchComments();\n\n    return () => {\n      source.cancel('Component unmounted');\n    };\n  }, [post.member_id, post.id]);\n  \n  useEffect(() => {\n    if (showComments) {\n      const fetchData = async () => {\n        const promises = comments.map((comment) => {\n          return axios.get(`/api/users?member_id=${comment.memberId}&firstName=`);\n        });\n  \n        try {\n          const responses = await Promise.all(promises);\n          const commentUsers = responses.map((res) => res.data);\n          setCommentsData(commentUsers);\n          setLoadingComment(true);\n        } catch (err) {\n          console.log(err);\n        } finally {\n          setLoadingComment(false);\n        } \n      };\n  \n      fetchData();\n    } else {\n      // Clear commentsData when showComments is false\n      setCommentsData([]);\n    }\n  }, [comments, showComments]);  \n  \n  //++++++++++ on Click Button +++++++++++\n  \n  //Post----------------------------------------------------\n  \n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n    \n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  \n  const handleEditPost = () => {\n    setdataEdit(post);\n    setOpenModal(true);\n    handleClose();\n  };\n  \n  const handlePostUpdate = (updatedPost) => {\n    if (typeModal === 'Post') {\n      // Handle updated post\n      // ...\n    } else if (typeModal === 'Comment') {\n      // Handle updated comment separately\n      const updatedCommentIndex = comments.findIndex((comment) => comment.id === updatedPost.id);\n\n      if (updatedCommentIndex === -1) {\n        // Comment is not present in the comments array, add it\n        setComments((prevComments) => [...prevComments, updatedPost]);\n      } else {\n        // Comment is already present, update it\n        setComments((prevComments) => {\n          const updatedComments = [...prevComments];\n          updatedComments[updatedCommentIndex] = updatedPost;\n          return updatedComments;\n        });\n      }\n    } else {\n      console.log('Err Edit Type');\n    }\n  };\n  \n  const handleDeletePost = async () => {\n    const requestBody = {\n      member_id: currentUser.member_id\n    };\n    \n    try {\n      const response = await axios.delete(`/api/posts/${post.id}`, { data: requestBody });\n      const message = response.data.message;\n      // Handle the response message here\n      console.log(message);\n      window.location.reload();\n      handleClose();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  \n  //ITEM OF POST ----------------------------------------------\n  \n  const SortableItem = SortableElement(({ item, containerRef }) => {\n    const isImage = post.title === 'image';\n  \n    if (isImage) {\n      return (\n        <div className=\"shareImgItem\">\n          <img src={item.url} alt=\"Gallery Image\" className=\"shareImg\" />\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"shareVideoItem\">\n          <ReactPlayer\n            url={item.url} \n            className=\"shareVideo\" \n            width=\"640\"\n            height=\"360\" \n            controls\n            onClick={(event) => event.preventDefault()}\n          />\n        </div>\n      );\n    }\n  });\n  \n  const SortableList = SortableContainer(({ items }) => {\n  \n    return (\n      <div className=\"shareImgContainer\" ref={containerRef}>\n        {items.map((item, index) => (\n          <SortableItem key={index} item={item} index={index} containerRef={containerRef} />\n        ))}\n      </div>\n    );\n  });\n  \n  //Comment-------------------------------------------\n  \n  const handleClickComment = (event, id) => {\n    setAnchorElComment(event.currentTarget);\n    const comment = comments.find(c => c.id === id);\n    console.log(comment)\n    setdataEdit(comment);\n    setCommentIdToDelete(id);\n  };  \n  \n  \n  const handleCloseComment = () => {\n    setAnchorElComment(null);\n  };\n\n  const handleEditComment = (id) => {\n    const comment = comments.find(c => c.id === id);\n    setdataEdit(comment);\n    setdataEditID(id);\n    setTypeModal(\"Comment\")\n    setOpenModal(true);\n    handleCloseComment();\n  };\n\n  const handleDeleteComment = async (commentId) => {\n    console.log(`Delete Comment ${commentId}`);\n    const requestBody = {\n      member_id: currentUser.member_id\n    };\n  \n    try {\n      const response = await axios.delete(`/api/comments/${post.id}/comments/${commentId}`, { data: requestBody });\n      const message = response.data.message;\n      // Handle the response message here\n      console.log(message);\n  \n      // Fetch the updated comments after deleting the comment\n      const resComments = await axios.get(`/api/comments/${post.id}/comments`);\n      setComments(resComments.data);\n  \n      handleClose();\n      setLoadingComment(true);\n    } catch (err) {\n      console.log(err);\n    } finally {\n      setLoadingComment(false);\n      handleClose();\n    } \n  };\n  \n  const submitComment = async () => {\n    try {\n      // Submit the comment\n      await axios.post(`/api/comments/${post.id}/comments`, {\n        content: newCommentText,\n        member_id: currentUser.member_id,\n      });\n  \n      // Clear the comment input field\n      setNewCommentText(\"\");\n\n      const resComments = await axios.get(`/api/comments/${post.id}/comments`);\n      setComments(resComments.data);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  \n  //Like ------------------------------------------------\n\n  const likeHandler = async () => {\n    try {\n      await axios.put(`/api/posts/${post.id}/like`, { member_id: currentUser.member_id });\n    } catch (err) {\n      console.log(err);\n    }\n\n    if (isLiked) {\n      setLike(like - 1);\n    } else {\n      setLike(like + 1);\n    }\n    setIsLiked(!isLiked);\n  };\n\n  return (\n    <div className=\"post\">\n      <Card className=\"postWrapper\">\n        <CardHeader\n          avatar={\n            <Link to={`/profile/${user.firstName}`}>\n              <Avatar aria-label=\"recipe\" src={user.profilePicture} style={{ width: '39px', height: '39px' }}>\n              </Avatar>\n            </Link>\n          }\n          title={`${user.firstName} ${user.lastName}`}\n          subheader={formattedDate}\n          action={\n            <>\n              <IconButton onClick={handleClick}>\n                <MoreVert />\n              </IconButton>\n              <Menu\n                anchorEl={anchorEl}\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n                keepMounted\n              >\n                <MenuItem onClick={handleEditPost}>\n                  <span><EditIcon /></span>\n                  <span>Edit</span>\n                </MenuItem>\n                <MenuItem \n                  onClick={handleDeletePost} \n                >  \n                <span><DeleteIcon /></span>\n                <span>Delete</span>\n                </MenuItem>\n              </Menu>\n            </>\n          }\n        />\n       <CardContent>\n        <Typography variant=\"body1\" className=\"postText\">\n          <span>{post?.content}</span>\n        </Typography>\n        <Typography variant=\"body2\" className=\"postText\">\n          {post?.tagpet.map((pet) => (\n            <span>\n              <Chip key={pet} label={`#${pet}`} className=\"postChip\" style={{ color: '#6200E8' }}/>\n            </span>\n          ))}\n        </Typography>\n        <SortableList\n          items={post.img.map((item) => ({\n            type: item.endsWith('.mp4') ? 'video' : 'image',\n            url: item,\n          }))}\n          axis=\"xy\"\n        />\n      </CardContent>\n        <hr className=\"PostHr\" />\n        <div className=\"postBottom\">\n          <div className=\"postBottomLeft\">\n            <CardActions disableSpacing>\n              {isLiked ? (\n                <IconButton aria-label=\"add to favorites\" onClick={likeHandler}>\n                  <Favorite className=\"likeIcon\" style={{ color: '#6200E8' }} />\n                </IconButton>\n              ) : (\n                <IconButton aria-label=\"add to favorites\" onClick={likeHandler}>\n                  <FavoriteBorder className=\"likeIcon\" style={{ color: '#6200E8' }} />\n                </IconButton>\n              )}\n              <span className=\"postLikeCounter\">{like} people like it</span>\n            </CardActions>\n          </div>\n          <div className=\"postBottomRight\">\n            <CardActions disableSpacing>\n              <IconButton\n                aria-label=\"show more\"\n                sx={{ color: '#6200E8',  right: 14 }}\n                onClick={() => setShowComments(!showComments)}\n              >\n                <Comment />\n                <p className=\"postCommentText\" underline=\"none\">\n                  <span>\n                    {comments.length} comments\n                   </span>\n                </p>\n              </IconButton>\n            </CardActions>\n          </div>\n        </div>\n        <Collapse in={showComments} timeout=\"auto\" unmountOnExit>\n        <hr className=\"PostHr\" />\n        {loadingComment ? (\n          <div className=\"loadingWrapper\">\n            <ReactLoading type=\"spin\" color=\"#6200E8\" height={'10%'} width={'10%'} />\n          </div>\n          ) : (\n          <CardContent>\n            <Typography paragraph>Comments</Typography>\n            {comments.slice(0, showAllComments ? comments.length : maxDisplayedComments).map((comment, index) => {\n              const commentData = commentsData.find(data => data.member_id === comment.memberId);\n              return (\n                <div key={index} className=\"postComment\">\n                  <div className=\"postCommentProfile\">\n                    <CardHeader\n                      avatar={\n                        <Avatar\n                          aria-label=\"recipe\"\n                          src={commentData?.profilePicture}\n                          sx={{ width: '39px', height: '39px' }}\n                        />\n                      }\n                      title={`${commentData?.firstName} ${commentData?.lastName}`}\n                      subheader={`${comment.content}`}\n                      action={\n                        <>\n                          <IconButton onClick={(event) => handleClickComment(event, comment.id)}>\n                            <MoreVert />\n                          </IconButton>\n                        </>\n                      }\n                    />\n                    <Menu\n                      anchorEl={anchorElComment}\n                      open={Boolean(anchorElComment)}\n                      onClose={handleCloseComment}\n                    >\n                      <MenuItem onClick={() => handleEditComment(commentIdToDelete)}>\n                        <span><EditIcon /></span>\n                        <span>Edit</span>\n                      </MenuItem>\n                      <MenuItem \n                        onClick={() => handleDeleteComment(commentIdToDelete)}\n                      >\n                        <span><DeleteIcon /></span>\n                        <span>Delete</span>\n                      </MenuItem>\n                    </Menu>\n                  </div>\n                </div>\n              );\n            })}\n            {comments.length > maxDisplayedComments && (\n              <Typography\n                className=\"showMoreComments\"\n                variant=\"body2\"\n                color=\"primary\"\n                onClick={() => setShowAllComments(!showAllComments)}\n              >\n                {showAllComments ? \"Hide\" : \"Show More\"} Comments\n              </Typography>\n            )}\n            <TextField\n              label=\"Add a comment\"\n              variant=\"outlined\"\n              value={newCommentText}\n              onChange={(e) => setNewCommentText(e.target.value)}\n              fullWidth\n              style={{ color: isLiked ? 'inherit' : '#6200E8' }}\n            />\n            <Button\n              variant=\"contained\"\n              onClick={() => submitComment(post.id, newCommentText, user.member_id)}\n            >\n              Comment\n            </Button>\n          </CardContent>\n          )}\n        </Collapse>\n      </Card>\n      {openModal && (\n        <NestedModal \n          key={post?.id}\n          onClose={() => setOpenModal(false)} \n          onContent={dataEdit} \n          onTitle={typeModal} \n          userId={currentUser?.member_id}\n          onContentID={post?.id}\n          onCommentsID={dataEditID}\n          onLoading={true}\n          onPostUpdate={handlePostUpdate}\n        />\n      )}\n    </div>\n  );\n}\n","/Users/watthananick/pet-story-project/client/src/components/online/Online.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/components/closeFriend/CloseFriend.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/components/share/Share.jsx",["126","127"],[],"import \"./share.css\";\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/storage';\nimport React, { useContext, useRef, useState, useEffect } from \"react\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport axios from \"axios\";\n\nimport {\n  Avatar,\n  Chip,\n} from \"@mui/material\";\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport {\n  PermMedia,\n  Cancel,\n  Send as SendIcon,\n} from \"@mui/icons-material\";\nimport { SortableContainer, SortableElement } from \"react-sortable-hoc\";\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n};\n\nfirebase.initializeApp(firebaseConfig);\nconst storage = firebase.storage();\n\nexport default function Share({ onNewPost }) {\n  const { user } = useContext(AuthContext);\n  const desc = useRef();\n  const [typePets, setTypePets] = useState([]);\n  const [selectedTags, setSelectedTags] = useState([]);\n  const [files, setFiles] = useState([]);\n  const [error, setError] = useState(null);\n  const [typeData, setTypeData] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const onSortEnd = ({ oldIndex, newIndex }) => {\n    setFiles(arrayMove(files, oldIndex, newIndex));\n  };\n  \n  //++++++++++ on Click Button +++++++++++\n  \n  const handleFileChange = (e) => {\n    const selectedFiles = Array.from(e.target.files).slice(0, 6); // Limit to 6 files\n  \n    // File size limits\n    const imageMaxSize = 5 * 1024 * 1024; // 5 MB in bytes\n    const videoMaxSize = 100 * 1024 * 1024; // 100 MB in bytes\n  \n    // Validate file sizes\n    const validFiles = selectedFiles.filter((file) => {\n      if (file.type.startsWith('image/') && file.size <= imageMaxSize) {\n        return true; // Valid image file\n      }\n      if (file.type.startsWith('video/') && file.size <= videoMaxSize) {\n        return true; // Valid video file\n      }\n      setError(\"The file size exceeds the specified size.\");\n      return false; // Invalid file\n    });\n\n    setFiles(validFiles);\n\n    console.log('Valid files:', validFiles);\n  };\n\n  const removeFile = (index) => {\n    const updatedFiles = [...files];\n    updatedFiles.splice(index, 1);\n    setFiles(updatedFiles);\n  };\n  \n  const submitHandler = async (e) => {\n    e.preventDefault();\n\n    setLoading(true);\n\n    const storageRef = storage.ref();\n    const filePromises = files.map((file) => {\n      const fileName = Date.now() + file.name;\n      const fileRef = storageRef.child(`${user.member_id}/${fileName}`);\n      return fileRef.put(file);\n    });\n\n    try {\n      const uploadSnapshots = await Promise.all(filePromises);\n\n      const fileUrls = await Promise.all(\n        uploadSnapshots.map((snapshot) => snapshot.ref.getDownloadURL())\n      );\n\n      const newPost = {\n        title: typeData,\n        content: desc.current.value,\n        member_id: user.member_id,\n        likes: [],\n        tagpet: selectedTags,\n        img: fileUrls,\n        comment: []\n      };\n\n      await axios.post(\"/api/posts\", newPost);\n      setFiles([]);\n      setTypeData(null);\n      setSelectedTags([]);\n      desc.current.value = \"\";\n\n      if (onNewPost) {\n        onNewPost();\n      }\n    } catch (err) {\n      console.log(err);\n      setError(\n        \"Failed to upload files or create a new post. Please try again.\"\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  useEffect(() => {\n    const getTypePets = async () => {\n      try {\n        const res = await axios.get(\"/api/typePets\");\n        setTypePets(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    getTypePets();\n  }, []);\n  \n  //----------- ITEM OF SHARE ------------------------\n\n  const SortableItem = SortableElement(({ item, index }) => {\n  if (item.type === 'image') {\n    setTypeData('image');\n    return (\n      <div className=\"shareImgItem\">\n        <img src={item.url} alt=\"Gallery Image\" className=\"shareImg\" />\n        <Cancel className=\"shareCancelImg\" onClick={() => removeFile(index)} />\n      </div>\n    );\n  } else if (item.type === 'video') {\n    setTypeData('video');\n    return (\n      <div className=\"shareVideoItem\">\n        <video src={item.url} className=\"shareVideo\" controls />\n        <Cancel className=\"shareCancelImg\" onClick={() => removeFile(index)} />\n      </div>\n    );\n  } else {\n    return null; // Exclude unsupported file types\n  }\n});\n\nconsole.log(typeData);\n\nconst SortableList = SortableContainer(({ items }) => (\n  <div className=\"shareImgContainer\">\n    {items.map((item, index) => (\n      <div key={index}>\n        <SortableItem item={item} index={index} />\n        <p>{index}</p>\n      </div>\n    ))}\n  </div>\n));\n  \n  function arrayMove(array, oldIndex, newIndex) {\n    if (newIndex >= array.length) {\n      let k = newIndex - array.length + 1;\n      while (k--) {\n        array.push(undefined);\n      }\n    }\n    array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n    return array;\n  }\n  \n  //--------------- Tag Pet ----------------------------------\n  const handleTagClick = (tag) => {\n    if (selectedTags.includes(tag)) {\n      setSelectedTags(selectedTags.filter((t) => t !== tag));\n    } else {\n      setSelectedTags([...selectedTags, tag]);\n    }\n  };\n  \n  return (\n    <div className=\"share\">\n      <div className=\"shareWrapper\">\n        <div className=\"shareTop\">\n          <Avatar\n            aria-label=\"recipe\"\n            src={user.profilePicture}\n            sx={{ width: \"39px\", height: \"39px\", mr: 1 }}\n          ></Avatar>\n          <input\n            placeholder={\" What's in your mind \" + user.firstName + \"?\"}\n            className=\"shareInput\"\n            ref={desc}\n          />\n        </div>\n        <hr className=\"shareHr\" />\n        {files && files.length > 0 && (\n          <SortableList\n            items={files.map((file) => {\n              if (file.type.startsWith('image/')) {\n                return { type: 'image', url: URL.createObjectURL(file) };\n              } else if (file.type.startsWith('video/')) {\n                return { type: 'video', url: URL.createObjectURL(file) };\n              } else {\n                return null; // Exclude unsupported file types\n              }\n            }).filter((item) => item !== null)} // Filter out null items\n            onSortEnd={onSortEnd}\n            useDragHandle={true}\n            axis=\"xy\"\n          />\n        )}\n        <form className=\"shareBottom\" onSubmit={submitHandler}>\n          <div className=\"shareOptions\">\n            <label htmlFor=\"file\" className=\"shareOption\">\n              <PermMedia htmlColor=\"tomato\" className=\"shareIcon\" />\n              <span className=\"shareOptionText\">Photo or Video</span>\n              <input\n                style={{ display: \"none\" }}\n                type=\"file\"\n                id=\"file\"\n                accept=\".png,.jpeg,.jpg,.mp4\"\n                multiple\n                onChange={handleFileChange}\n              />\n            </label>\n            <div className=\"shareOption\">\n              {typePets && typePets.length > 0 && (\n                <div className=\"tagContainer\">\n                  {typePets.map((typePet) => (\n                    <Chip\n                      key={typePet.id_TypePet}\n                      label={typePet.nameType}\n                      clickable\n                      color={selectedTags.includes(typePet.nameType) ? \"primary\" : \"default\"}\n                      onClick={() => handleTagClick(typePet.nameType)}\n                      className=\"topChip\"\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n          <LoadingButton\n            size=\"small\"\n            type=\"submit\"\n            sx={{ backgroundColor: \"#6200E8\" }}\n            endIcon={<SendIcon />}\n            loading={loading}\n            loadingPosition=\"end\"\n            variant=\"contained\"\n          >\n            <span>Share</span>\n          </LoadingButton>\n        </form>\n      </div>\n    </div>\n  );  \n}\n","/Users/watthananick/pet-story-project/client/src/components/modelEdit/ModalEdit.jsx",[],[],"/Users/watthananick/pet-story-project/client/src/components/search/Search.jsx",[],[],{"ruleId":"128","severity":1,"message":"129","line":7,"column":8,"nodeType":"130","messageId":"131","endLine":7,"endColumn":20},{"ruleId":"128","severity":1,"message":"132","line":14,"column":3,"nodeType":"130","messageId":"131","endLine":14,"endColumn":10},{"ruleId":"128","severity":1,"message":"133","line":16,"column":3,"nodeType":"130","messageId":"131","endLine":16,"endColumn":7},{"ruleId":"128","severity":1,"message":"134","line":18,"column":3,"nodeType":"130","messageId":"131","endLine":18,"endColumn":19},{"ruleId":"128","severity":1,"message":"135","line":19,"column":3,"nodeType":"130","messageId":"131","endLine":19,"endColumn":7},{"ruleId":"128","severity":1,"message":"136","line":20,"column":3,"nodeType":"130","messageId":"131","endLine":20,"endColumn":11},{"ruleId":"128","severity":1,"message":"137","line":21,"column":3,"nodeType":"130","messageId":"131","endLine":21,"endColumn":15},{"ruleId":"128","severity":1,"message":"138","line":22,"column":3,"nodeType":"130","messageId":"131","endLine":22,"endColumn":17},{"ruleId":"128","severity":1,"message":"139","line":32,"column":10,"nodeType":"130","messageId":"131","endLine":32,"endColumn":24},{"ruleId":"128","severity":1,"message":"140","line":35,"column":10,"nodeType":"130","messageId":"131","endLine":35,"endColumn":17},{"ruleId":"128","severity":1,"message":"141","line":35,"column":19,"nodeType":"130","messageId":"131","endLine":35,"endColumn":29},{"ruleId":"128","severity":1,"message":"142","line":36,"column":10,"nodeType":"130","messageId":"131","endLine":36,"endColumn":24},{"ruleId":"128","severity":1,"message":"143","line":36,"column":26,"nodeType":"130","messageId":"131","endLine":36,"endColumn":43},{"ruleId":"128","severity":1,"message":"144","line":37,"column":10,"nodeType":"130","messageId":"131","endLine":37,"endColumn":17},{"ruleId":"128","severity":1,"message":"145","line":37,"column":19,"nodeType":"130","messageId":"131","endLine":37,"endColumn":29},{"ruleId":"146","severity":1,"message":"147","line":180,"column":11,"nodeType":"148","endLine":180,"endColumn":74},{"ruleId":"128","severity":1,"message":"149","line":39,"column":10,"nodeType":"130","messageId":"131","endLine":39,"endColumn":15},{"ruleId":"146","severity":1,"message":"147","line":146,"column":9,"nodeType":"148","endLine":146,"endColumn":72},"no-unused-vars","'ReactLoading' is defined but never used.","Identifier","unusedVar","'Divider' is defined but never used.","'Chip' is defined but never used.","'CircularProgress' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'InputAdornment' is defined but never used.","'searchResponse' is assigned a value but never used.","'editing' is assigned a value but never used.","'setEditing' is assigned a value but never used.","'updatedContent' is assigned a value but never used.","'setUpdatedContent' is assigned a value but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'error' is assigned a value but never used."]