{"ast":null,"code":"import axios from \"axios\";\nimport jwtDecode from \"jwt-decode\";\nexport const loginCall = async (userCredential, dispatch) => {\n  dispatch({\n    type: \"LOGIN_START\"\n  });\n  try {\n    const res = await axios.post(\"/auth/login\", userCredential);\n    const {\n      token,\n      user\n    } = res.data;\n\n    // Save JWT to an HTTP-only cookie\n    document.cookie = `jwt=${token}; path=/; secure; HttpOnly`;\n\n    // Decode the JWT to extract user data\n    const decodedUser = jwtDecode(token);\n    console.log('token: ' + JSON.stringify(decodedUser));\n\n    // Dispatch LOGIN_SUCCESS action with the decoded user data\n    dispatch({\n      type: \"LOGIN_SUCCESS\",\n      payload: user.data\n    });\n  } catch (err) {\n    // Dispatch LOGIN_FAILURE action with the error\n    dispatch({\n      type: \"LOGIN_FAILURE\",\n      payload: err.response.data.error\n    });\n  }\n};\n\n// Example of fetching additional user data separately\nexport const fetchUserData = async (userId, dispatch) => {\n  try {\n    const res = await axios.get(`/users?member_id=${userId}&firstName=`);\n    const userData = res.data;\n\n    // Dispatch action to update user data in the state\n    dispatch({\n      type: \"UPDATE_USER_DATA\",\n      payload: userData\n    });\n  } catch (err) {\n    // Handle error\n    console.error(\"Failed to fetch user data:\", err);\n  }\n};","map":{"version":3,"names":["axios","jwtDecode","loginCall","userCredential","dispatch","type","res","post","token","user","data","document","cookie","decodedUser","console","log","JSON","stringify","payload","err","response","error","fetchUserData","userId","get","userData"],"sources":["/Users/watthananick/pet-story-project/client/src/apiCalls.js"],"sourcesContent":["import axios from \"axios\";\nimport jwtDecode from \"jwt-decode\";\n\nexport const loginCall = async (userCredential, dispatch) => {\n  dispatch({ type: \"LOGIN_START\" });\n\n  try {\n    const res = await axios.post(\"/auth/login\", userCredential);\n    const { token, user } = res.data;\n\n    // Save JWT to an HTTP-only cookie\n    document.cookie = `jwt=${token}; path=/; secure; HttpOnly`;\n\n    // Decode the JWT to extract user data\n    const decodedUser = jwtDecode(token);\n    console.log('token: ' + JSON.stringify(decodedUser));\n\n    // Dispatch LOGIN_SUCCESS action with the decoded user data\n    dispatch({ type: \"LOGIN_SUCCESS\", payload: user.data });\n  } catch (err) {\n    // Dispatch LOGIN_FAILURE action with the error\n    dispatch({ type: \"LOGIN_FAILURE\", payload: err.response.data.error });\n  }\n};\n\n// Example of fetching additional user data separately\nexport const fetchUserData = async (userId, dispatch) => {\n  try {\n    const res = await axios.get(`/users?member_id=${userId}&firstName=`);\n    const userData = res.data;\n\n    // Dispatch action to update user data in the state\n    dispatch({ type: \"UPDATE_USER_DATA\", payload: userData });\n  } catch (err) {\n    // Handle error\n    console.error(\"Failed to fetch user data:\", err);\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAElC,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOC,cAAc,EAAEC,QAAQ,KAAK;EAC3DA,QAAQ,CAAC;IAAEC,IAAI,EAAE;EAAc,CAAC,CAAC;EAEjC,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMN,KAAK,CAACO,IAAI,CAAC,aAAa,EAAEJ,cAAc,CAAC;IAC3D,MAAM;MAAEK,KAAK;MAAEC;IAAK,CAAC,GAAGH,GAAG,CAACI,IAAI;;IAEhC;IACAC,QAAQ,CAACC,MAAM,GAAI,OAAMJ,KAAM,4BAA2B;;IAE1D;IACA,MAAMK,WAAW,GAAGZ,SAAS,CAACO,KAAK,CAAC;IACpCM,OAAO,CAACC,GAAG,CAAC,SAAS,GAAGC,IAAI,CAACC,SAAS,CAACJ,WAAW,CAAC,CAAC;;IAEpD;IACAT,QAAQ,CAAC;MAAEC,IAAI,EAAE,eAAe;MAAEa,OAAO,EAAET,IAAI,CAACC;IAAK,CAAC,CAAC;EACzD,CAAC,CAAC,OAAOS,GAAG,EAAE;IACZ;IACAf,QAAQ,CAAC;MAAEC,IAAI,EAAE,eAAe;MAAEa,OAAO,EAAEC,GAAG,CAACC,QAAQ,CAACV,IAAI,CAACW;IAAM,CAAC,CAAC;EACvE;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAOC,MAAM,EAAEnB,QAAQ,KAAK;EACvD,IAAI;IACF,MAAME,GAAG,GAAG,MAAMN,KAAK,CAACwB,GAAG,CAAE,oBAAmBD,MAAO,aAAY,CAAC;IACpE,MAAME,QAAQ,GAAGnB,GAAG,CAACI,IAAI;;IAEzB;IACAN,QAAQ,CAAC;MAAEC,IAAI,EAAE,kBAAkB;MAAEa,OAAO,EAAEO;IAAS,CAAC,CAAC;EAC3D,CAAC,CAAC,OAAON,GAAG,EAAE;IACZ;IACAL,OAAO,CAACO,KAAK,CAAC,4BAA4B,EAAEF,GAAG,CAAC;EAClD;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}